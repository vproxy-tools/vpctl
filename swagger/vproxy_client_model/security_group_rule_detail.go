// Code generated by go-swagger; DO NOT EDIT.

package vproxy_client_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SecurityGroupRuleDetail security group rule detail
//
// swagger:model SecurityGroupRuleDetail
type SecurityGroupRuleDetail struct {

	// network cidr
	ClientNetwork string `json:"clientNetwork,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// protocol
	Protocol SecurityGroupProtocol `json:"protocol,omitempty"`

	// rule
	Rule Rule `json:"rule,omitempty"`

	// port range max for server (inclusive)
	ServerPortMax int64 `json:"serverPortMax,omitempty"`

	// port range min for server (inclusive)
	ServerPortMin int64 `json:"serverPortMin,omitempty"`
}

// Validate validates this security group rule detail
func (m *SecurityGroupRuleDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityGroupRuleDetail) validateProtocol(formats strfmt.Registry) error {
	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	if err := m.Protocol.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("protocol")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("protocol")
		}
		return err
	}

	return nil
}

func (m *SecurityGroupRuleDetail) validateRule(formats strfmt.Registry) error {
	if swag.IsZero(m.Rule) { // not required
		return nil
	}

	if err := m.Rule.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rule")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("rule")
		}
		return err
	}

	return nil
}

// ContextValidate validate this security group rule detail based on the context it is used
func (m *SecurityGroupRuleDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProtocol(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityGroupRuleDetail) contextValidateProtocol(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Protocol.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("protocol")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("protocol")
		}
		return err
	}

	return nil
}

func (m *SecurityGroupRuleDetail) contextValidateRule(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Rule.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rule")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("rule")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecurityGroupRuleDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityGroupRuleDetail) UnmarshalBinary(b []byte) error {
	var res SecurityGroupRuleDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
