// Code generated by go-swagger; DO NOT EDIT.

package vproxy_client_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CheckProtocol the protocol for health check
//
// swagger:model CheckProtocol
type CheckProtocol string

func NewCheckProtocol(value CheckProtocol) *CheckProtocol {
	return &value
}

// Pointer returns a pointer to a freshly-allocated CheckProtocol.
func (m CheckProtocol) Pointer() *CheckProtocol {
	return &m
}

const (

	// CheckProtocolTCP captures enum value "tcp"
	CheckProtocolTCP CheckProtocol = "tcp"

	// CheckProtocolHTTP captures enum value "http"
	CheckProtocolHTTP CheckProtocol = "http"

	// CheckProtocolDNS captures enum value "dns"
	CheckProtocolDNS CheckProtocol = "dns"

	// CheckProtocolTCPDelay captures enum value "tcpDelay"
	CheckProtocolTCPDelay CheckProtocol = "tcpDelay"

	// CheckProtocolNone captures enum value "none"
	CheckProtocolNone CheckProtocol = "none"
)

// for schema
var checkProtocolEnum []interface{}

func init() {
	var res []CheckProtocol
	if err := json.Unmarshal([]byte(`["tcp","http","dns","tcpDelay","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		checkProtocolEnum = append(checkProtocolEnum, v)
	}
}

func (m CheckProtocol) validateCheckProtocolEnum(path, location string, value CheckProtocol) error {
	if err := validate.EnumCase(path, location, value, checkProtocolEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this check protocol
func (m CheckProtocol) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCheckProtocolEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this check protocol based on context it is used
func (m CheckProtocol) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
