// Code generated by go-swagger; DO NOT EDIT.

package security_group_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new security group rule API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for security group rule API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddSecurityGroupRule(params *AddSecurityGroupRuleParams, opts ...ClientOption) (*AddSecurityGroupRuleNoContent, error)

	DescribeSecurityGroupRule(params *DescribeSecurityGroupRuleParams, opts ...ClientOption) (*DescribeSecurityGroupRuleOK, error)

	GetSecurityGroupRule(params *GetSecurityGroupRuleParams, opts ...ClientOption) (*GetSecurityGroupRuleOK, error)

	ListSecurityGroupRule(params *ListSecurityGroupRuleParams, opts ...ClientOption) (*ListSecurityGroupRuleOK, error)

	RemoveSecurityGroupRule(params *RemoveSecurityGroupRuleParams, opts ...ClientOption) (*RemoveSecurityGroupRuleNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddSecurityGroupRule adds security group rule into security group
*/
func (a *Client) AddSecurityGroupRule(params *AddSecurityGroupRuleParams, opts ...ClientOption) (*AddSecurityGroupRuleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddSecurityGroupRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addSecurityGroupRule",
		Method:             "POST",
		PathPattern:        "/security-group/{secg}/security-group-rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddSecurityGroupRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddSecurityGroupRuleNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addSecurityGroupRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DescribeSecurityGroupRule gets detailed info of one security group rule in security group
*/
func (a *Client) DescribeSecurityGroupRule(params *DescribeSecurityGroupRuleParams, opts ...ClientOption) (*DescribeSecurityGroupRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeSecurityGroupRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeSecurityGroupRule",
		Method:             "GET",
		PathPattern:        "/security-group/{secg}/security-group-rule/{secgr}/detail",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeSecurityGroupRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeSecurityGroupRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for describeSecurityGroupRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSecurityGroupRule gets security group rule in security group
*/
func (a *Client) GetSecurityGroupRule(params *GetSecurityGroupRuleParams, opts ...ClientOption) (*GetSecurityGroupRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecurityGroupRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSecurityGroupRule",
		Method:             "GET",
		PathPattern:        "/security-group/{secg}/security-group-rule/{secgr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSecurityGroupRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSecurityGroupRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSecurityGroupRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListSecurityGroupRule retrieves security group rule list from security group
*/
func (a *Client) ListSecurityGroupRule(params *ListSecurityGroupRuleParams, opts ...ClientOption) (*ListSecurityGroupRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSecurityGroupRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listSecurityGroupRule",
		Method:             "GET",
		PathPattern:        "/security-group/{secg}/security-group-rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListSecurityGroupRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSecurityGroupRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listSecurityGroupRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveSecurityGroupRule removes security group rule from security group
*/
func (a *Client) RemoveSecurityGroupRule(params *RemoveSecurityGroupRuleParams, opts ...ClientOption) (*RemoveSecurityGroupRuleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveSecurityGroupRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeSecurityGroupRule",
		Method:             "DELETE",
		PathPattern:        "/security-group/{secg}/security-group-rule/{secgr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveSecurityGroupRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveSecurityGroupRuleNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeSecurityGroupRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
