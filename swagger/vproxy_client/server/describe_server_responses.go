// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vproxy-tools/vpctl/swagger/vproxy_client_model"
)

// DescribeServerReader is a Reader for the DescribeServer structure.
type DescribeServerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DescribeServerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDescribeServerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDescribeServerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDescribeServerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDescribeServerConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDescribeServerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDescribeServerOK creates a DescribeServerOK with default headers values
func NewDescribeServerOK() *DescribeServerOK {
	return &DescribeServerOK{}
}

/*
DescribeServerOK describes a response with status code 200, with default header values.

ok
*/
type DescribeServerOK struct {
	Payload *vproxy_client_model.ServerDetail
}

// IsSuccess returns true when this describe server o k response has a 2xx status code
func (o *DescribeServerOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this describe server o k response has a 3xx status code
func (o *DescribeServerOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this describe server o k response has a 4xx status code
func (o *DescribeServerOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this describe server o k response has a 5xx status code
func (o *DescribeServerOK) IsServerError() bool {
	return false
}

// IsCode returns true when this describe server o k response a status code equal to that given
func (o *DescribeServerOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the describe server o k response
func (o *DescribeServerOK) Code() int {
	return 200
}

func (o *DescribeServerOK) Error() string {
	return fmt.Sprintf("[GET /server-group/{sg}/server/{svr}/detail][%d] describeServerOK  %+v", 200, o.Payload)
}

func (o *DescribeServerOK) String() string {
	return fmt.Sprintf("[GET /server-group/{sg}/server/{svr}/detail][%d] describeServerOK  %+v", 200, o.Payload)
}

func (o *DescribeServerOK) GetPayload() *vproxy_client_model.ServerDetail {
	return o.Payload
}

func (o *DescribeServerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.ServerDetail)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDescribeServerBadRequest creates a DescribeServerBadRequest with default headers values
func NewDescribeServerBadRequest() *DescribeServerBadRequest {
	return &DescribeServerBadRequest{}
}

/*
DescribeServerBadRequest describes a response with status code 400, with default header values.

invalid input parameters
*/
type DescribeServerBadRequest struct {
	Payload *vproxy_client_model.Error400
}

// IsSuccess returns true when this describe server bad request response has a 2xx status code
func (o *DescribeServerBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this describe server bad request response has a 3xx status code
func (o *DescribeServerBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this describe server bad request response has a 4xx status code
func (o *DescribeServerBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this describe server bad request response has a 5xx status code
func (o *DescribeServerBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this describe server bad request response a status code equal to that given
func (o *DescribeServerBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the describe server bad request response
func (o *DescribeServerBadRequest) Code() int {
	return 400
}

func (o *DescribeServerBadRequest) Error() string {
	return fmt.Sprintf("[GET /server-group/{sg}/server/{svr}/detail][%d] describeServerBadRequest  %+v", 400, o.Payload)
}

func (o *DescribeServerBadRequest) String() string {
	return fmt.Sprintf("[GET /server-group/{sg}/server/{svr}/detail][%d] describeServerBadRequest  %+v", 400, o.Payload)
}

func (o *DescribeServerBadRequest) GetPayload() *vproxy_client_model.Error400 {
	return o.Payload
}

func (o *DescribeServerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error400)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDescribeServerNotFound creates a DescribeServerNotFound with default headers values
func NewDescribeServerNotFound() *DescribeServerNotFound {
	return &DescribeServerNotFound{}
}

/*
DescribeServerNotFound describes a response with status code 404, with default header values.

resource not found
*/
type DescribeServerNotFound struct {
	Payload *vproxy_client_model.Error404
}

// IsSuccess returns true when this describe server not found response has a 2xx status code
func (o *DescribeServerNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this describe server not found response has a 3xx status code
func (o *DescribeServerNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this describe server not found response has a 4xx status code
func (o *DescribeServerNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this describe server not found response has a 5xx status code
func (o *DescribeServerNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this describe server not found response a status code equal to that given
func (o *DescribeServerNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the describe server not found response
func (o *DescribeServerNotFound) Code() int {
	return 404
}

func (o *DescribeServerNotFound) Error() string {
	return fmt.Sprintf("[GET /server-group/{sg}/server/{svr}/detail][%d] describeServerNotFound  %+v", 404, o.Payload)
}

func (o *DescribeServerNotFound) String() string {
	return fmt.Sprintf("[GET /server-group/{sg}/server/{svr}/detail][%d] describeServerNotFound  %+v", 404, o.Payload)
}

func (o *DescribeServerNotFound) GetPayload() *vproxy_client_model.Error404 {
	return o.Payload
}

func (o *DescribeServerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error404)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDescribeServerConflict creates a DescribeServerConflict with default headers values
func NewDescribeServerConflict() *DescribeServerConflict {
	return &DescribeServerConflict{}
}

/*
DescribeServerConflict describes a response with status code 409, with default header values.

conflict
*/
type DescribeServerConflict struct {
	Payload *vproxy_client_model.Error409
}

// IsSuccess returns true when this describe server conflict response has a 2xx status code
func (o *DescribeServerConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this describe server conflict response has a 3xx status code
func (o *DescribeServerConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this describe server conflict response has a 4xx status code
func (o *DescribeServerConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this describe server conflict response has a 5xx status code
func (o *DescribeServerConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this describe server conflict response a status code equal to that given
func (o *DescribeServerConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the describe server conflict response
func (o *DescribeServerConflict) Code() int {
	return 409
}

func (o *DescribeServerConflict) Error() string {
	return fmt.Sprintf("[GET /server-group/{sg}/server/{svr}/detail][%d] describeServerConflict  %+v", 409, o.Payload)
}

func (o *DescribeServerConflict) String() string {
	return fmt.Sprintf("[GET /server-group/{sg}/server/{svr}/detail][%d] describeServerConflict  %+v", 409, o.Payload)
}

func (o *DescribeServerConflict) GetPayload() *vproxy_client_model.Error409 {
	return o.Payload
}

func (o *DescribeServerConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error409)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDescribeServerInternalServerError creates a DescribeServerInternalServerError with default headers values
func NewDescribeServerInternalServerError() *DescribeServerInternalServerError {
	return &DescribeServerInternalServerError{}
}

/*
DescribeServerInternalServerError describes a response with status code 500, with default header values.

internal error
*/
type DescribeServerInternalServerError struct {
	Payload *vproxy_client_model.Error500
}

// IsSuccess returns true when this describe server internal server error response has a 2xx status code
func (o *DescribeServerInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this describe server internal server error response has a 3xx status code
func (o *DescribeServerInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this describe server internal server error response has a 4xx status code
func (o *DescribeServerInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this describe server internal server error response has a 5xx status code
func (o *DescribeServerInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this describe server internal server error response a status code equal to that given
func (o *DescribeServerInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the describe server internal server error response
func (o *DescribeServerInternalServerError) Code() int {
	return 500
}

func (o *DescribeServerInternalServerError) Error() string {
	return fmt.Sprintf("[GET /server-group/{sg}/server/{svr}/detail][%d] describeServerInternalServerError  %+v", 500, o.Payload)
}

func (o *DescribeServerInternalServerError) String() string {
	return fmt.Sprintf("[GET /server-group/{sg}/server/{svr}/detail][%d] describeServerInternalServerError  %+v", 500, o.Payload)
}

func (o *DescribeServerInternalServerError) GetPayload() *vproxy_client_model.Error500 {
	return o.Payload
}

func (o *DescribeServerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error500)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
