// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new server API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for server API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddServer(params *AddServerParams, opts ...ClientOption) (*AddServerNoContent, error)

	DescribeServer(params *DescribeServerParams, opts ...ClientOption) (*DescribeServerOK, error)

	GetServer(params *GetServerParams, opts ...ClientOption) (*GetServerOK, error)

	ListServer(params *ListServerParams, opts ...ClientOption) (*ListServerOK, error)

	RemoveServer(params *RemoveServerParams, opts ...ClientOption) (*RemoveServerNoContent, error)

	UpdateServer(params *UpdateServerParams, opts ...ClientOption) (*UpdateServerNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddServer adds server into server group
*/
func (a *Client) AddServer(params *AddServerParams, opts ...ClientOption) (*AddServerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddServerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addServer",
		Method:             "POST",
		PathPattern:        "/server-group/{sg}/server",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddServerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddServerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DescribeServer gets detailed info of one server in server group
*/
func (a *Client) DescribeServer(params *DescribeServerParams, opts ...ClientOption) (*DescribeServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeServerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeServer",
		Method:             "GET",
		PathPattern:        "/server-group/{sg}/server/{svr}/detail",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeServerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for describeServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetServer gets server in server group
*/
func (a *Client) GetServer(params *GetServerParams, opts ...ClientOption) (*GetServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getServer",
		Method:             "GET",
		PathPattern:        "/server-group/{sg}/server/{svr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListServer retrieves server list from server group
*/
func (a *Client) ListServer(params *ListServerParams, opts ...ClientOption) (*ListServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListServerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listServer",
		Method:             "GET",
		PathPattern:        "/server-group/{sg}/server",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListServerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveServer removes server from server group
*/
func (a *Client) RemoveServer(params *RemoveServerParams, opts ...ClientOption) (*RemoveServerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveServerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeServer",
		Method:             "DELETE",
		PathPattern:        "/server-group/{sg}/server/{svr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveServerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveServerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateServer updates server in server group
*/
func (a *Client) UpdateServer(params *UpdateServerParams, opts ...ClientOption) (*UpdateServerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateServer",
		Method:             "PUT",
		PathPattern:        "/server-group/{sg}/server/{svr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateServerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateServerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
