// Code generated by go-swagger; DO NOT EDIT.

package dns_server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vproxy-tools/vpctl/swagger/vproxy_client_model"
)

// UpdateDNSServerReader is a Reader for the UpdateDNSServer structure.
type UpdateDNSServerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateDNSServerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateDNSServerNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateDNSServerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateDNSServerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateDNSServerConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateDNSServerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateDNSServerNoContent creates a UpdateDNSServerNoContent with default headers values
func NewUpdateDNSServerNoContent() *UpdateDNSServerNoContent {
	return &UpdateDNSServerNoContent{}
}

/*
UpdateDNSServerNoContent describes a response with status code 204, with default header values.

ok
*/
type UpdateDNSServerNoContent struct {
}

// IsSuccess returns true when this update Dns server no content response has a 2xx status code
func (o *UpdateDNSServerNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update Dns server no content response has a 3xx status code
func (o *UpdateDNSServerNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update Dns server no content response has a 4xx status code
func (o *UpdateDNSServerNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this update Dns server no content response has a 5xx status code
func (o *UpdateDNSServerNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this update Dns server no content response a status code equal to that given
func (o *UpdateDNSServerNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the update Dns server no content response
func (o *UpdateDNSServerNoContent) Code() int {
	return 204
}

func (o *UpdateDNSServerNoContent) Error() string {
	return fmt.Sprintf("[PUT /dns-server/{dns}][%d] updateDnsServerNoContent ", 204)
}

func (o *UpdateDNSServerNoContent) String() string {
	return fmt.Sprintf("[PUT /dns-server/{dns}][%d] updateDnsServerNoContent ", 204)
}

func (o *UpdateDNSServerNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDNSServerBadRequest creates a UpdateDNSServerBadRequest with default headers values
func NewUpdateDNSServerBadRequest() *UpdateDNSServerBadRequest {
	return &UpdateDNSServerBadRequest{}
}

/*
UpdateDNSServerBadRequest describes a response with status code 400, with default header values.

invalid input parameters
*/
type UpdateDNSServerBadRequest struct {
	Payload *vproxy_client_model.Error400
}

// IsSuccess returns true when this update Dns server bad request response has a 2xx status code
func (o *UpdateDNSServerBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update Dns server bad request response has a 3xx status code
func (o *UpdateDNSServerBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update Dns server bad request response has a 4xx status code
func (o *UpdateDNSServerBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update Dns server bad request response has a 5xx status code
func (o *UpdateDNSServerBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update Dns server bad request response a status code equal to that given
func (o *UpdateDNSServerBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update Dns server bad request response
func (o *UpdateDNSServerBadRequest) Code() int {
	return 400
}

func (o *UpdateDNSServerBadRequest) Error() string {
	return fmt.Sprintf("[PUT /dns-server/{dns}][%d] updateDnsServerBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateDNSServerBadRequest) String() string {
	return fmt.Sprintf("[PUT /dns-server/{dns}][%d] updateDnsServerBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateDNSServerBadRequest) GetPayload() *vproxy_client_model.Error400 {
	return o.Payload
}

func (o *UpdateDNSServerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error400)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDNSServerNotFound creates a UpdateDNSServerNotFound with default headers values
func NewUpdateDNSServerNotFound() *UpdateDNSServerNotFound {
	return &UpdateDNSServerNotFound{}
}

/*
UpdateDNSServerNotFound describes a response with status code 404, with default header values.

resource not found
*/
type UpdateDNSServerNotFound struct {
	Payload *vproxy_client_model.Error404
}

// IsSuccess returns true when this update Dns server not found response has a 2xx status code
func (o *UpdateDNSServerNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update Dns server not found response has a 3xx status code
func (o *UpdateDNSServerNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update Dns server not found response has a 4xx status code
func (o *UpdateDNSServerNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update Dns server not found response has a 5xx status code
func (o *UpdateDNSServerNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update Dns server not found response a status code equal to that given
func (o *UpdateDNSServerNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update Dns server not found response
func (o *UpdateDNSServerNotFound) Code() int {
	return 404
}

func (o *UpdateDNSServerNotFound) Error() string {
	return fmt.Sprintf("[PUT /dns-server/{dns}][%d] updateDnsServerNotFound  %+v", 404, o.Payload)
}

func (o *UpdateDNSServerNotFound) String() string {
	return fmt.Sprintf("[PUT /dns-server/{dns}][%d] updateDnsServerNotFound  %+v", 404, o.Payload)
}

func (o *UpdateDNSServerNotFound) GetPayload() *vproxy_client_model.Error404 {
	return o.Payload
}

func (o *UpdateDNSServerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error404)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDNSServerConflict creates a UpdateDNSServerConflict with default headers values
func NewUpdateDNSServerConflict() *UpdateDNSServerConflict {
	return &UpdateDNSServerConflict{}
}

/*
UpdateDNSServerConflict describes a response with status code 409, with default header values.

conflict
*/
type UpdateDNSServerConflict struct {
	Payload *vproxy_client_model.Error409
}

// IsSuccess returns true when this update Dns server conflict response has a 2xx status code
func (o *UpdateDNSServerConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update Dns server conflict response has a 3xx status code
func (o *UpdateDNSServerConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update Dns server conflict response has a 4xx status code
func (o *UpdateDNSServerConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update Dns server conflict response has a 5xx status code
func (o *UpdateDNSServerConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update Dns server conflict response a status code equal to that given
func (o *UpdateDNSServerConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the update Dns server conflict response
func (o *UpdateDNSServerConflict) Code() int {
	return 409
}

func (o *UpdateDNSServerConflict) Error() string {
	return fmt.Sprintf("[PUT /dns-server/{dns}][%d] updateDnsServerConflict  %+v", 409, o.Payload)
}

func (o *UpdateDNSServerConflict) String() string {
	return fmt.Sprintf("[PUT /dns-server/{dns}][%d] updateDnsServerConflict  %+v", 409, o.Payload)
}

func (o *UpdateDNSServerConflict) GetPayload() *vproxy_client_model.Error409 {
	return o.Payload
}

func (o *UpdateDNSServerConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error409)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDNSServerInternalServerError creates a UpdateDNSServerInternalServerError with default headers values
func NewUpdateDNSServerInternalServerError() *UpdateDNSServerInternalServerError {
	return &UpdateDNSServerInternalServerError{}
}

/*
UpdateDNSServerInternalServerError describes a response with status code 500, with default header values.

internal error
*/
type UpdateDNSServerInternalServerError struct {
	Payload *vproxy_client_model.Error500
}

// IsSuccess returns true when this update Dns server internal server error response has a 2xx status code
func (o *UpdateDNSServerInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update Dns server internal server error response has a 3xx status code
func (o *UpdateDNSServerInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update Dns server internal server error response has a 4xx status code
func (o *UpdateDNSServerInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update Dns server internal server error response has a 5xx status code
func (o *UpdateDNSServerInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update Dns server internal server error response a status code equal to that given
func (o *UpdateDNSServerInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update Dns server internal server error response
func (o *UpdateDNSServerInternalServerError) Code() int {
	return 500
}

func (o *UpdateDNSServerInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /dns-server/{dns}][%d] updateDnsServerInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateDNSServerInternalServerError) String() string {
	return fmt.Sprintf("[PUT /dns-server/{dns}][%d] updateDnsServerInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateDNSServerInternalServerError) GetPayload() *vproxy_client_model.Error500 {
	return o.Payload
}

func (o *UpdateDNSServerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error500)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
