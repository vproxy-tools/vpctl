// Code generated by go-swagger; DO NOT EDIT.

package dns_server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vproxy-tools/vpctl/swagger/vproxy_client_model"
)

// ListDNSServerReader is a Reader for the ListDNSServer structure.
type ListDNSServerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListDNSServerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListDNSServerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListDNSServerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewListDNSServerConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListDNSServerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListDNSServerOK creates a ListDNSServerOK with default headers values
func NewListDNSServerOK() *ListDNSServerOK {
	return &ListDNSServerOK{}
}

/*
ListDNSServerOK describes a response with status code 200, with default header values.

ok
*/
type ListDNSServerOK struct {
	Payload []*vproxy_client_model.DNSServer
}

// IsSuccess returns true when this list Dns server o k response has a 2xx status code
func (o *ListDNSServerOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list Dns server o k response has a 3xx status code
func (o *ListDNSServerOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list Dns server o k response has a 4xx status code
func (o *ListDNSServerOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list Dns server o k response has a 5xx status code
func (o *ListDNSServerOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list Dns server o k response a status code equal to that given
func (o *ListDNSServerOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list Dns server o k response
func (o *ListDNSServerOK) Code() int {
	return 200
}

func (o *ListDNSServerOK) Error() string {
	return fmt.Sprintf("[GET /dns-server][%d] listDnsServerOK  %+v", 200, o.Payload)
}

func (o *ListDNSServerOK) String() string {
	return fmt.Sprintf("[GET /dns-server][%d] listDnsServerOK  %+v", 200, o.Payload)
}

func (o *ListDNSServerOK) GetPayload() []*vproxy_client_model.DNSServer {
	return o.Payload
}

func (o *ListDNSServerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListDNSServerBadRequest creates a ListDNSServerBadRequest with default headers values
func NewListDNSServerBadRequest() *ListDNSServerBadRequest {
	return &ListDNSServerBadRequest{}
}

/*
ListDNSServerBadRequest describes a response with status code 400, with default header values.

invalid input parameters
*/
type ListDNSServerBadRequest struct {
	Payload *vproxy_client_model.Error400
}

// IsSuccess returns true when this list Dns server bad request response has a 2xx status code
func (o *ListDNSServerBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list Dns server bad request response has a 3xx status code
func (o *ListDNSServerBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list Dns server bad request response has a 4xx status code
func (o *ListDNSServerBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list Dns server bad request response has a 5xx status code
func (o *ListDNSServerBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list Dns server bad request response a status code equal to that given
func (o *ListDNSServerBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the list Dns server bad request response
func (o *ListDNSServerBadRequest) Code() int {
	return 400
}

func (o *ListDNSServerBadRequest) Error() string {
	return fmt.Sprintf("[GET /dns-server][%d] listDnsServerBadRequest  %+v", 400, o.Payload)
}

func (o *ListDNSServerBadRequest) String() string {
	return fmt.Sprintf("[GET /dns-server][%d] listDnsServerBadRequest  %+v", 400, o.Payload)
}

func (o *ListDNSServerBadRequest) GetPayload() *vproxy_client_model.Error400 {
	return o.Payload
}

func (o *ListDNSServerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error400)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListDNSServerConflict creates a ListDNSServerConflict with default headers values
func NewListDNSServerConflict() *ListDNSServerConflict {
	return &ListDNSServerConflict{}
}

/*
ListDNSServerConflict describes a response with status code 409, with default header values.

conflict
*/
type ListDNSServerConflict struct {
	Payload *vproxy_client_model.Error409
}

// IsSuccess returns true when this list Dns server conflict response has a 2xx status code
func (o *ListDNSServerConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list Dns server conflict response has a 3xx status code
func (o *ListDNSServerConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list Dns server conflict response has a 4xx status code
func (o *ListDNSServerConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this list Dns server conflict response has a 5xx status code
func (o *ListDNSServerConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this list Dns server conflict response a status code equal to that given
func (o *ListDNSServerConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the list Dns server conflict response
func (o *ListDNSServerConflict) Code() int {
	return 409
}

func (o *ListDNSServerConflict) Error() string {
	return fmt.Sprintf("[GET /dns-server][%d] listDnsServerConflict  %+v", 409, o.Payload)
}

func (o *ListDNSServerConflict) String() string {
	return fmt.Sprintf("[GET /dns-server][%d] listDnsServerConflict  %+v", 409, o.Payload)
}

func (o *ListDNSServerConflict) GetPayload() *vproxy_client_model.Error409 {
	return o.Payload
}

func (o *ListDNSServerConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error409)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListDNSServerInternalServerError creates a ListDNSServerInternalServerError with default headers values
func NewListDNSServerInternalServerError() *ListDNSServerInternalServerError {
	return &ListDNSServerInternalServerError{}
}

/*
ListDNSServerInternalServerError describes a response with status code 500, with default header values.

internal error
*/
type ListDNSServerInternalServerError struct {
	Payload *vproxy_client_model.Error500
}

// IsSuccess returns true when this list Dns server internal server error response has a 2xx status code
func (o *ListDNSServerInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list Dns server internal server error response has a 3xx status code
func (o *ListDNSServerInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list Dns server internal server error response has a 4xx status code
func (o *ListDNSServerInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list Dns server internal server error response has a 5xx status code
func (o *ListDNSServerInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list Dns server internal server error response a status code equal to that given
func (o *ListDNSServerInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the list Dns server internal server error response
func (o *ListDNSServerInternalServerError) Code() int {
	return 500
}

func (o *ListDNSServerInternalServerError) Error() string {
	return fmt.Sprintf("[GET /dns-server][%d] listDnsServerInternalServerError  %+v", 500, o.Payload)
}

func (o *ListDNSServerInternalServerError) String() string {
	return fmt.Sprintf("[GET /dns-server][%d] listDnsServerInternalServerError  %+v", 500, o.Payload)
}

func (o *ListDNSServerInternalServerError) GetPayload() *vproxy_client_model.Error500 {
	return o.Payload
}

func (o *ListDNSServerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error500)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
