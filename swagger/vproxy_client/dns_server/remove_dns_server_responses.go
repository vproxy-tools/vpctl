// Code generated by go-swagger; DO NOT EDIT.

package dns_server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vproxy-tools/vpctl/swagger/vproxy_client_model"
)

// RemoveDNSServerReader is a Reader for the RemoveDNSServer structure.
type RemoveDNSServerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RemoveDNSServerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewRemoveDNSServerNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRemoveDNSServerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRemoveDNSServerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewRemoveDNSServerConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRemoveDNSServerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRemoveDNSServerNoContent creates a RemoveDNSServerNoContent with default headers values
func NewRemoveDNSServerNoContent() *RemoveDNSServerNoContent {
	return &RemoveDNSServerNoContent{}
}

/*
RemoveDNSServerNoContent describes a response with status code 204, with default header values.

ok
*/
type RemoveDNSServerNoContent struct {
}

// IsSuccess returns true when this remove Dns server no content response has a 2xx status code
func (o *RemoveDNSServerNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this remove Dns server no content response has a 3xx status code
func (o *RemoveDNSServerNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove Dns server no content response has a 4xx status code
func (o *RemoveDNSServerNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this remove Dns server no content response has a 5xx status code
func (o *RemoveDNSServerNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this remove Dns server no content response a status code equal to that given
func (o *RemoveDNSServerNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the remove Dns server no content response
func (o *RemoveDNSServerNoContent) Code() int {
	return 204
}

func (o *RemoveDNSServerNoContent) Error() string {
	return fmt.Sprintf("[DELETE /dns-server/{dns}][%d] removeDnsServerNoContent ", 204)
}

func (o *RemoveDNSServerNoContent) String() string {
	return fmt.Sprintf("[DELETE /dns-server/{dns}][%d] removeDnsServerNoContent ", 204)
}

func (o *RemoveDNSServerNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemoveDNSServerBadRequest creates a RemoveDNSServerBadRequest with default headers values
func NewRemoveDNSServerBadRequest() *RemoveDNSServerBadRequest {
	return &RemoveDNSServerBadRequest{}
}

/*
RemoveDNSServerBadRequest describes a response with status code 400, with default header values.

invalid input parameters
*/
type RemoveDNSServerBadRequest struct {
	Payload *vproxy_client_model.Error400
}

// IsSuccess returns true when this remove Dns server bad request response has a 2xx status code
func (o *RemoveDNSServerBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove Dns server bad request response has a 3xx status code
func (o *RemoveDNSServerBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove Dns server bad request response has a 4xx status code
func (o *RemoveDNSServerBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove Dns server bad request response has a 5xx status code
func (o *RemoveDNSServerBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this remove Dns server bad request response a status code equal to that given
func (o *RemoveDNSServerBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the remove Dns server bad request response
func (o *RemoveDNSServerBadRequest) Code() int {
	return 400
}

func (o *RemoveDNSServerBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /dns-server/{dns}][%d] removeDnsServerBadRequest  %+v", 400, o.Payload)
}

func (o *RemoveDNSServerBadRequest) String() string {
	return fmt.Sprintf("[DELETE /dns-server/{dns}][%d] removeDnsServerBadRequest  %+v", 400, o.Payload)
}

func (o *RemoveDNSServerBadRequest) GetPayload() *vproxy_client_model.Error400 {
	return o.Payload
}

func (o *RemoveDNSServerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error400)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveDNSServerNotFound creates a RemoveDNSServerNotFound with default headers values
func NewRemoveDNSServerNotFound() *RemoveDNSServerNotFound {
	return &RemoveDNSServerNotFound{}
}

/*
RemoveDNSServerNotFound describes a response with status code 404, with default header values.

resource not found
*/
type RemoveDNSServerNotFound struct {
	Payload *vproxy_client_model.Error404
}

// IsSuccess returns true when this remove Dns server not found response has a 2xx status code
func (o *RemoveDNSServerNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove Dns server not found response has a 3xx status code
func (o *RemoveDNSServerNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove Dns server not found response has a 4xx status code
func (o *RemoveDNSServerNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove Dns server not found response has a 5xx status code
func (o *RemoveDNSServerNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this remove Dns server not found response a status code equal to that given
func (o *RemoveDNSServerNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the remove Dns server not found response
func (o *RemoveDNSServerNotFound) Code() int {
	return 404
}

func (o *RemoveDNSServerNotFound) Error() string {
	return fmt.Sprintf("[DELETE /dns-server/{dns}][%d] removeDnsServerNotFound  %+v", 404, o.Payload)
}

func (o *RemoveDNSServerNotFound) String() string {
	return fmt.Sprintf("[DELETE /dns-server/{dns}][%d] removeDnsServerNotFound  %+v", 404, o.Payload)
}

func (o *RemoveDNSServerNotFound) GetPayload() *vproxy_client_model.Error404 {
	return o.Payload
}

func (o *RemoveDNSServerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error404)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveDNSServerConflict creates a RemoveDNSServerConflict with default headers values
func NewRemoveDNSServerConflict() *RemoveDNSServerConflict {
	return &RemoveDNSServerConflict{}
}

/*
RemoveDNSServerConflict describes a response with status code 409, with default header values.

conflict
*/
type RemoveDNSServerConflict struct {
	Payload *vproxy_client_model.Error409
}

// IsSuccess returns true when this remove Dns server conflict response has a 2xx status code
func (o *RemoveDNSServerConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove Dns server conflict response has a 3xx status code
func (o *RemoveDNSServerConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove Dns server conflict response has a 4xx status code
func (o *RemoveDNSServerConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove Dns server conflict response has a 5xx status code
func (o *RemoveDNSServerConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this remove Dns server conflict response a status code equal to that given
func (o *RemoveDNSServerConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the remove Dns server conflict response
func (o *RemoveDNSServerConflict) Code() int {
	return 409
}

func (o *RemoveDNSServerConflict) Error() string {
	return fmt.Sprintf("[DELETE /dns-server/{dns}][%d] removeDnsServerConflict  %+v", 409, o.Payload)
}

func (o *RemoveDNSServerConflict) String() string {
	return fmt.Sprintf("[DELETE /dns-server/{dns}][%d] removeDnsServerConflict  %+v", 409, o.Payload)
}

func (o *RemoveDNSServerConflict) GetPayload() *vproxy_client_model.Error409 {
	return o.Payload
}

func (o *RemoveDNSServerConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error409)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveDNSServerInternalServerError creates a RemoveDNSServerInternalServerError with default headers values
func NewRemoveDNSServerInternalServerError() *RemoveDNSServerInternalServerError {
	return &RemoveDNSServerInternalServerError{}
}

/*
RemoveDNSServerInternalServerError describes a response with status code 500, with default header values.

internal error
*/
type RemoveDNSServerInternalServerError struct {
	Payload *vproxy_client_model.Error500
}

// IsSuccess returns true when this remove Dns server internal server error response has a 2xx status code
func (o *RemoveDNSServerInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove Dns server internal server error response has a 3xx status code
func (o *RemoveDNSServerInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove Dns server internal server error response has a 4xx status code
func (o *RemoveDNSServerInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this remove Dns server internal server error response has a 5xx status code
func (o *RemoveDNSServerInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this remove Dns server internal server error response a status code equal to that given
func (o *RemoveDNSServerInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the remove Dns server internal server error response
func (o *RemoveDNSServerInternalServerError) Code() int {
	return 500
}

func (o *RemoveDNSServerInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /dns-server/{dns}][%d] removeDnsServerInternalServerError  %+v", 500, o.Payload)
}

func (o *RemoveDNSServerInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /dns-server/{dns}][%d] removeDnsServerInternalServerError  %+v", 500, o.Payload)
}

func (o *RemoveDNSServerInternalServerError) GetPayload() *vproxy_client_model.Error500 {
	return o.Payload
}

func (o *RemoveDNSServerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error500)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
