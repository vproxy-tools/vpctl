// Code generated by go-swagger; DO NOT EDIT.

package cert_key

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new cert key API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cert key API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddCertKey(params *AddCertKeyParams, opts ...ClientOption) (*AddCertKeyNoContent, error)

	AddCertKeyPem(params *AddCertKeyPemParams, opts ...ClientOption) (*AddCertKeyPemNoContent, error)

	DescribeCertKey(params *DescribeCertKeyParams, opts ...ClientOption) (*DescribeCertKeyOK, error)

	GetCertKey(params *GetCertKeyParams, opts ...ClientOption) (*GetCertKeyOK, error)

	ListCertKey(params *ListCertKeyParams, opts ...ClientOption) (*ListCertKeyOK, error)

	RemoveCertKey(params *RemoveCertKeyParams, opts ...ClientOption) (*RemoveCertKeyNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddCertKey adds cert key
*/
func (a *Client) AddCertKey(params *AddCertKeyParams, opts ...ClientOption) (*AddCertKeyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddCertKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addCertKey",
		Method:             "POST",
		PathPattern:        "/cert-key",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddCertKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddCertKeyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addCertKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddCertKeyPem adds cert key pem
*/
func (a *Client) AddCertKeyPem(params *AddCertKeyPemParams, opts ...ClientOption) (*AddCertKeyPemNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddCertKeyPemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addCertKeyPem",
		Method:             "POST",
		PathPattern:        "/cert-key/pem",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddCertKeyPemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddCertKeyPemNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addCertKeyPem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DescribeCertKey gets detailed info of one cert key
*/
func (a *Client) DescribeCertKey(params *DescribeCertKeyParams, opts ...ClientOption) (*DescribeCertKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeCertKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeCertKey",
		Method:             "GET",
		PathPattern:        "/cert-key/{ck}/detail",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeCertKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeCertKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for describeCertKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCertKey gets cert key
*/
func (a *Client) GetCertKey(params *GetCertKeyParams, opts ...ClientOption) (*GetCertKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCertKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCertKey",
		Method:             "GET",
		PathPattern:        "/cert-key/{ck}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCertKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCertKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCertKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListCertKey retrieves cert key list
*/
func (a *Client) ListCertKey(params *ListCertKeyParams, opts ...ClientOption) (*ListCertKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCertKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listCertKey",
		Method:             "GET",
		PathPattern:        "/cert-key",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCertKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCertKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCertKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveCertKey removes cert key
*/
func (a *Client) RemoveCertKey(params *RemoveCertKeyParams, opts ...ClientOption) (*RemoveCertKeyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveCertKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeCertKey",
		Method:             "DELETE",
		PathPattern:        "/cert-key/{ck}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveCertKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveCertKeyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeCertKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
