// Code generated by go-swagger; DO NOT EDIT.

package cert_key

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vproxy-tools/vpctl/swagger/vproxy_client_model"
)

// AddCertKeyPemReader is a Reader for the AddCertKeyPem structure.
type AddCertKeyPemReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddCertKeyPemReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewAddCertKeyPemNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddCertKeyPemBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddCertKeyPemNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewAddCertKeyPemConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddCertKeyPemInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAddCertKeyPemNoContent creates a AddCertKeyPemNoContent with default headers values
func NewAddCertKeyPemNoContent() *AddCertKeyPemNoContent {
	return &AddCertKeyPemNoContent{}
}

/*
AddCertKeyPemNoContent describes a response with status code 204, with default header values.

ok
*/
type AddCertKeyPemNoContent struct {
}

// IsSuccess returns true when this add cert key pem no content response has a 2xx status code
func (o *AddCertKeyPemNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add cert key pem no content response has a 3xx status code
func (o *AddCertKeyPemNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add cert key pem no content response has a 4xx status code
func (o *AddCertKeyPemNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this add cert key pem no content response has a 5xx status code
func (o *AddCertKeyPemNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this add cert key pem no content response a status code equal to that given
func (o *AddCertKeyPemNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the add cert key pem no content response
func (o *AddCertKeyPemNoContent) Code() int {
	return 204
}

func (o *AddCertKeyPemNoContent) Error() string {
	return fmt.Sprintf("[POST /cert-key/pem][%d] addCertKeyPemNoContent ", 204)
}

func (o *AddCertKeyPemNoContent) String() string {
	return fmt.Sprintf("[POST /cert-key/pem][%d] addCertKeyPemNoContent ", 204)
}

func (o *AddCertKeyPemNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddCertKeyPemBadRequest creates a AddCertKeyPemBadRequest with default headers values
func NewAddCertKeyPemBadRequest() *AddCertKeyPemBadRequest {
	return &AddCertKeyPemBadRequest{}
}

/*
AddCertKeyPemBadRequest describes a response with status code 400, with default header values.

invalid input parameters
*/
type AddCertKeyPemBadRequest struct {
	Payload *vproxy_client_model.Error400
}

// IsSuccess returns true when this add cert key pem bad request response has a 2xx status code
func (o *AddCertKeyPemBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add cert key pem bad request response has a 3xx status code
func (o *AddCertKeyPemBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add cert key pem bad request response has a 4xx status code
func (o *AddCertKeyPemBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this add cert key pem bad request response has a 5xx status code
func (o *AddCertKeyPemBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this add cert key pem bad request response a status code equal to that given
func (o *AddCertKeyPemBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the add cert key pem bad request response
func (o *AddCertKeyPemBadRequest) Code() int {
	return 400
}

func (o *AddCertKeyPemBadRequest) Error() string {
	return fmt.Sprintf("[POST /cert-key/pem][%d] addCertKeyPemBadRequest  %+v", 400, o.Payload)
}

func (o *AddCertKeyPemBadRequest) String() string {
	return fmt.Sprintf("[POST /cert-key/pem][%d] addCertKeyPemBadRequest  %+v", 400, o.Payload)
}

func (o *AddCertKeyPemBadRequest) GetPayload() *vproxy_client_model.Error400 {
	return o.Payload
}

func (o *AddCertKeyPemBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error400)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddCertKeyPemNotFound creates a AddCertKeyPemNotFound with default headers values
func NewAddCertKeyPemNotFound() *AddCertKeyPemNotFound {
	return &AddCertKeyPemNotFound{}
}

/*
AddCertKeyPemNotFound describes a response with status code 404, with default header values.

resource not found
*/
type AddCertKeyPemNotFound struct {
	Payload *vproxy_client_model.Error404
}

// IsSuccess returns true when this add cert key pem not found response has a 2xx status code
func (o *AddCertKeyPemNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add cert key pem not found response has a 3xx status code
func (o *AddCertKeyPemNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add cert key pem not found response has a 4xx status code
func (o *AddCertKeyPemNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this add cert key pem not found response has a 5xx status code
func (o *AddCertKeyPemNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this add cert key pem not found response a status code equal to that given
func (o *AddCertKeyPemNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the add cert key pem not found response
func (o *AddCertKeyPemNotFound) Code() int {
	return 404
}

func (o *AddCertKeyPemNotFound) Error() string {
	return fmt.Sprintf("[POST /cert-key/pem][%d] addCertKeyPemNotFound  %+v", 404, o.Payload)
}

func (o *AddCertKeyPemNotFound) String() string {
	return fmt.Sprintf("[POST /cert-key/pem][%d] addCertKeyPemNotFound  %+v", 404, o.Payload)
}

func (o *AddCertKeyPemNotFound) GetPayload() *vproxy_client_model.Error404 {
	return o.Payload
}

func (o *AddCertKeyPemNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error404)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddCertKeyPemConflict creates a AddCertKeyPemConflict with default headers values
func NewAddCertKeyPemConflict() *AddCertKeyPemConflict {
	return &AddCertKeyPemConflict{}
}

/*
AddCertKeyPemConflict describes a response with status code 409, with default header values.

conflict
*/
type AddCertKeyPemConflict struct {
	Payload *vproxy_client_model.Error409
}

// IsSuccess returns true when this add cert key pem conflict response has a 2xx status code
func (o *AddCertKeyPemConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add cert key pem conflict response has a 3xx status code
func (o *AddCertKeyPemConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add cert key pem conflict response has a 4xx status code
func (o *AddCertKeyPemConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this add cert key pem conflict response has a 5xx status code
func (o *AddCertKeyPemConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this add cert key pem conflict response a status code equal to that given
func (o *AddCertKeyPemConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the add cert key pem conflict response
func (o *AddCertKeyPemConflict) Code() int {
	return 409
}

func (o *AddCertKeyPemConflict) Error() string {
	return fmt.Sprintf("[POST /cert-key/pem][%d] addCertKeyPemConflict  %+v", 409, o.Payload)
}

func (o *AddCertKeyPemConflict) String() string {
	return fmt.Sprintf("[POST /cert-key/pem][%d] addCertKeyPemConflict  %+v", 409, o.Payload)
}

func (o *AddCertKeyPemConflict) GetPayload() *vproxy_client_model.Error409 {
	return o.Payload
}

func (o *AddCertKeyPemConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error409)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddCertKeyPemInternalServerError creates a AddCertKeyPemInternalServerError with default headers values
func NewAddCertKeyPemInternalServerError() *AddCertKeyPemInternalServerError {
	return &AddCertKeyPemInternalServerError{}
}

/*
AddCertKeyPemInternalServerError describes a response with status code 500, with default header values.

internal error
*/
type AddCertKeyPemInternalServerError struct {
	Payload *vproxy_client_model.Error500
}

// IsSuccess returns true when this add cert key pem internal server error response has a 2xx status code
func (o *AddCertKeyPemInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add cert key pem internal server error response has a 3xx status code
func (o *AddCertKeyPemInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add cert key pem internal server error response has a 4xx status code
func (o *AddCertKeyPemInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this add cert key pem internal server error response has a 5xx status code
func (o *AddCertKeyPemInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this add cert key pem internal server error response a status code equal to that given
func (o *AddCertKeyPemInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the add cert key pem internal server error response
func (o *AddCertKeyPemInternalServerError) Code() int {
	return 500
}

func (o *AddCertKeyPemInternalServerError) Error() string {
	return fmt.Sprintf("[POST /cert-key/pem][%d] addCertKeyPemInternalServerError  %+v", 500, o.Payload)
}

func (o *AddCertKeyPemInternalServerError) String() string {
	return fmt.Sprintf("[POST /cert-key/pem][%d] addCertKeyPemInternalServerError  %+v", 500, o.Payload)
}

func (o *AddCertKeyPemInternalServerError) GetPayload() *vproxy_client_model.Error500 {
	return o.Payload
}

func (o *AddCertKeyPemInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error500)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
