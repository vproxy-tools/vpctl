// Code generated by go-swagger; DO NOT EDIT.

package server_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vproxy-tools/vpctl/swagger/vproxy_client_model"
)

// DescribeServerGroupReader is a Reader for the DescribeServerGroup structure.
type DescribeServerGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DescribeServerGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDescribeServerGroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDescribeServerGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDescribeServerGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDescribeServerGroupConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDescribeServerGroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDescribeServerGroupOK creates a DescribeServerGroupOK with default headers values
func NewDescribeServerGroupOK() *DescribeServerGroupOK {
	return &DescribeServerGroupOK{}
}

/*
DescribeServerGroupOK describes a response with status code 200, with default header values.

ok
*/
type DescribeServerGroupOK struct {
	Payload *vproxy_client_model.ServerGroupDetail
}

// IsSuccess returns true when this describe server group o k response has a 2xx status code
func (o *DescribeServerGroupOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this describe server group o k response has a 3xx status code
func (o *DescribeServerGroupOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this describe server group o k response has a 4xx status code
func (o *DescribeServerGroupOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this describe server group o k response has a 5xx status code
func (o *DescribeServerGroupOK) IsServerError() bool {
	return false
}

// IsCode returns true when this describe server group o k response a status code equal to that given
func (o *DescribeServerGroupOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the describe server group o k response
func (o *DescribeServerGroupOK) Code() int {
	return 200
}

func (o *DescribeServerGroupOK) Error() string {
	return fmt.Sprintf("[GET /server-group/{sg}/detail][%d] describeServerGroupOK  %+v", 200, o.Payload)
}

func (o *DescribeServerGroupOK) String() string {
	return fmt.Sprintf("[GET /server-group/{sg}/detail][%d] describeServerGroupOK  %+v", 200, o.Payload)
}

func (o *DescribeServerGroupOK) GetPayload() *vproxy_client_model.ServerGroupDetail {
	return o.Payload
}

func (o *DescribeServerGroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.ServerGroupDetail)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDescribeServerGroupBadRequest creates a DescribeServerGroupBadRequest with default headers values
func NewDescribeServerGroupBadRequest() *DescribeServerGroupBadRequest {
	return &DescribeServerGroupBadRequest{}
}

/*
DescribeServerGroupBadRequest describes a response with status code 400, with default header values.

invalid input parameters
*/
type DescribeServerGroupBadRequest struct {
	Payload *vproxy_client_model.Error400
}

// IsSuccess returns true when this describe server group bad request response has a 2xx status code
func (o *DescribeServerGroupBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this describe server group bad request response has a 3xx status code
func (o *DescribeServerGroupBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this describe server group bad request response has a 4xx status code
func (o *DescribeServerGroupBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this describe server group bad request response has a 5xx status code
func (o *DescribeServerGroupBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this describe server group bad request response a status code equal to that given
func (o *DescribeServerGroupBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the describe server group bad request response
func (o *DescribeServerGroupBadRequest) Code() int {
	return 400
}

func (o *DescribeServerGroupBadRequest) Error() string {
	return fmt.Sprintf("[GET /server-group/{sg}/detail][%d] describeServerGroupBadRequest  %+v", 400, o.Payload)
}

func (o *DescribeServerGroupBadRequest) String() string {
	return fmt.Sprintf("[GET /server-group/{sg}/detail][%d] describeServerGroupBadRequest  %+v", 400, o.Payload)
}

func (o *DescribeServerGroupBadRequest) GetPayload() *vproxy_client_model.Error400 {
	return o.Payload
}

func (o *DescribeServerGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error400)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDescribeServerGroupNotFound creates a DescribeServerGroupNotFound with default headers values
func NewDescribeServerGroupNotFound() *DescribeServerGroupNotFound {
	return &DescribeServerGroupNotFound{}
}

/*
DescribeServerGroupNotFound describes a response with status code 404, with default header values.

resource not found
*/
type DescribeServerGroupNotFound struct {
	Payload *vproxy_client_model.Error404
}

// IsSuccess returns true when this describe server group not found response has a 2xx status code
func (o *DescribeServerGroupNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this describe server group not found response has a 3xx status code
func (o *DescribeServerGroupNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this describe server group not found response has a 4xx status code
func (o *DescribeServerGroupNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this describe server group not found response has a 5xx status code
func (o *DescribeServerGroupNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this describe server group not found response a status code equal to that given
func (o *DescribeServerGroupNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the describe server group not found response
func (o *DescribeServerGroupNotFound) Code() int {
	return 404
}

func (o *DescribeServerGroupNotFound) Error() string {
	return fmt.Sprintf("[GET /server-group/{sg}/detail][%d] describeServerGroupNotFound  %+v", 404, o.Payload)
}

func (o *DescribeServerGroupNotFound) String() string {
	return fmt.Sprintf("[GET /server-group/{sg}/detail][%d] describeServerGroupNotFound  %+v", 404, o.Payload)
}

func (o *DescribeServerGroupNotFound) GetPayload() *vproxy_client_model.Error404 {
	return o.Payload
}

func (o *DescribeServerGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error404)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDescribeServerGroupConflict creates a DescribeServerGroupConflict with default headers values
func NewDescribeServerGroupConflict() *DescribeServerGroupConflict {
	return &DescribeServerGroupConflict{}
}

/*
DescribeServerGroupConflict describes a response with status code 409, with default header values.

conflict
*/
type DescribeServerGroupConflict struct {
	Payload *vproxy_client_model.Error409
}

// IsSuccess returns true when this describe server group conflict response has a 2xx status code
func (o *DescribeServerGroupConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this describe server group conflict response has a 3xx status code
func (o *DescribeServerGroupConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this describe server group conflict response has a 4xx status code
func (o *DescribeServerGroupConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this describe server group conflict response has a 5xx status code
func (o *DescribeServerGroupConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this describe server group conflict response a status code equal to that given
func (o *DescribeServerGroupConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the describe server group conflict response
func (o *DescribeServerGroupConflict) Code() int {
	return 409
}

func (o *DescribeServerGroupConflict) Error() string {
	return fmt.Sprintf("[GET /server-group/{sg}/detail][%d] describeServerGroupConflict  %+v", 409, o.Payload)
}

func (o *DescribeServerGroupConflict) String() string {
	return fmt.Sprintf("[GET /server-group/{sg}/detail][%d] describeServerGroupConflict  %+v", 409, o.Payload)
}

func (o *DescribeServerGroupConflict) GetPayload() *vproxy_client_model.Error409 {
	return o.Payload
}

func (o *DescribeServerGroupConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error409)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDescribeServerGroupInternalServerError creates a DescribeServerGroupInternalServerError with default headers values
func NewDescribeServerGroupInternalServerError() *DescribeServerGroupInternalServerError {
	return &DescribeServerGroupInternalServerError{}
}

/*
DescribeServerGroupInternalServerError describes a response with status code 500, with default header values.

internal error
*/
type DescribeServerGroupInternalServerError struct {
	Payload *vproxy_client_model.Error500
}

// IsSuccess returns true when this describe server group internal server error response has a 2xx status code
func (o *DescribeServerGroupInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this describe server group internal server error response has a 3xx status code
func (o *DescribeServerGroupInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this describe server group internal server error response has a 4xx status code
func (o *DescribeServerGroupInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this describe server group internal server error response has a 5xx status code
func (o *DescribeServerGroupInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this describe server group internal server error response a status code equal to that given
func (o *DescribeServerGroupInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the describe server group internal server error response
func (o *DescribeServerGroupInternalServerError) Code() int {
	return 500
}

func (o *DescribeServerGroupInternalServerError) Error() string {
	return fmt.Sprintf("[GET /server-group/{sg}/detail][%d] describeServerGroupInternalServerError  %+v", 500, o.Payload)
}

func (o *DescribeServerGroupInternalServerError) String() string {
	return fmt.Sprintf("[GET /server-group/{sg}/detail][%d] describeServerGroupInternalServerError  %+v", 500, o.Payload)
}

func (o *DescribeServerGroupInternalServerError) GetPayload() *vproxy_client_model.Error500 {
	return o.Payload
}

func (o *DescribeServerGroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error500)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
