// Code generated by go-swagger; DO NOT EDIT.

package server_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vproxy-tools/vpctl/swagger/vproxy_client_model"
)

// UpdateServerGroupReader is a Reader for the UpdateServerGroup structure.
type UpdateServerGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateServerGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateServerGroupNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateServerGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateServerGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateServerGroupConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateServerGroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateServerGroupNoContent creates a UpdateServerGroupNoContent with default headers values
func NewUpdateServerGroupNoContent() *UpdateServerGroupNoContent {
	return &UpdateServerGroupNoContent{}
}

/*
UpdateServerGroupNoContent describes a response with status code 204, with default header values.

ok
*/
type UpdateServerGroupNoContent struct {
}

// IsSuccess returns true when this update server group no content response has a 2xx status code
func (o *UpdateServerGroupNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update server group no content response has a 3xx status code
func (o *UpdateServerGroupNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update server group no content response has a 4xx status code
func (o *UpdateServerGroupNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this update server group no content response has a 5xx status code
func (o *UpdateServerGroupNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this update server group no content response a status code equal to that given
func (o *UpdateServerGroupNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the update server group no content response
func (o *UpdateServerGroupNoContent) Code() int {
	return 204
}

func (o *UpdateServerGroupNoContent) Error() string {
	return fmt.Sprintf("[PUT /server-group/{sg}][%d] updateServerGroupNoContent ", 204)
}

func (o *UpdateServerGroupNoContent) String() string {
	return fmt.Sprintf("[PUT /server-group/{sg}][%d] updateServerGroupNoContent ", 204)
}

func (o *UpdateServerGroupNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateServerGroupBadRequest creates a UpdateServerGroupBadRequest with default headers values
func NewUpdateServerGroupBadRequest() *UpdateServerGroupBadRequest {
	return &UpdateServerGroupBadRequest{}
}

/*
UpdateServerGroupBadRequest describes a response with status code 400, with default header values.

invalid input parameters
*/
type UpdateServerGroupBadRequest struct {
	Payload *vproxy_client_model.Error400
}

// IsSuccess returns true when this update server group bad request response has a 2xx status code
func (o *UpdateServerGroupBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update server group bad request response has a 3xx status code
func (o *UpdateServerGroupBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update server group bad request response has a 4xx status code
func (o *UpdateServerGroupBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update server group bad request response has a 5xx status code
func (o *UpdateServerGroupBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update server group bad request response a status code equal to that given
func (o *UpdateServerGroupBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update server group bad request response
func (o *UpdateServerGroupBadRequest) Code() int {
	return 400
}

func (o *UpdateServerGroupBadRequest) Error() string {
	return fmt.Sprintf("[PUT /server-group/{sg}][%d] updateServerGroupBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateServerGroupBadRequest) String() string {
	return fmt.Sprintf("[PUT /server-group/{sg}][%d] updateServerGroupBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateServerGroupBadRequest) GetPayload() *vproxy_client_model.Error400 {
	return o.Payload
}

func (o *UpdateServerGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error400)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServerGroupNotFound creates a UpdateServerGroupNotFound with default headers values
func NewUpdateServerGroupNotFound() *UpdateServerGroupNotFound {
	return &UpdateServerGroupNotFound{}
}

/*
UpdateServerGroupNotFound describes a response with status code 404, with default header values.

resource not found
*/
type UpdateServerGroupNotFound struct {
	Payload *vproxy_client_model.Error404
}

// IsSuccess returns true when this update server group not found response has a 2xx status code
func (o *UpdateServerGroupNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update server group not found response has a 3xx status code
func (o *UpdateServerGroupNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update server group not found response has a 4xx status code
func (o *UpdateServerGroupNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update server group not found response has a 5xx status code
func (o *UpdateServerGroupNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update server group not found response a status code equal to that given
func (o *UpdateServerGroupNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update server group not found response
func (o *UpdateServerGroupNotFound) Code() int {
	return 404
}

func (o *UpdateServerGroupNotFound) Error() string {
	return fmt.Sprintf("[PUT /server-group/{sg}][%d] updateServerGroupNotFound  %+v", 404, o.Payload)
}

func (o *UpdateServerGroupNotFound) String() string {
	return fmt.Sprintf("[PUT /server-group/{sg}][%d] updateServerGroupNotFound  %+v", 404, o.Payload)
}

func (o *UpdateServerGroupNotFound) GetPayload() *vproxy_client_model.Error404 {
	return o.Payload
}

func (o *UpdateServerGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error404)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServerGroupConflict creates a UpdateServerGroupConflict with default headers values
func NewUpdateServerGroupConflict() *UpdateServerGroupConflict {
	return &UpdateServerGroupConflict{}
}

/*
UpdateServerGroupConflict describes a response with status code 409, with default header values.

conflict
*/
type UpdateServerGroupConflict struct {
	Payload *vproxy_client_model.Error409
}

// IsSuccess returns true when this update server group conflict response has a 2xx status code
func (o *UpdateServerGroupConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update server group conflict response has a 3xx status code
func (o *UpdateServerGroupConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update server group conflict response has a 4xx status code
func (o *UpdateServerGroupConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update server group conflict response has a 5xx status code
func (o *UpdateServerGroupConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update server group conflict response a status code equal to that given
func (o *UpdateServerGroupConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the update server group conflict response
func (o *UpdateServerGroupConflict) Code() int {
	return 409
}

func (o *UpdateServerGroupConflict) Error() string {
	return fmt.Sprintf("[PUT /server-group/{sg}][%d] updateServerGroupConflict  %+v", 409, o.Payload)
}

func (o *UpdateServerGroupConflict) String() string {
	return fmt.Sprintf("[PUT /server-group/{sg}][%d] updateServerGroupConflict  %+v", 409, o.Payload)
}

func (o *UpdateServerGroupConflict) GetPayload() *vproxy_client_model.Error409 {
	return o.Payload
}

func (o *UpdateServerGroupConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error409)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServerGroupInternalServerError creates a UpdateServerGroupInternalServerError with default headers values
func NewUpdateServerGroupInternalServerError() *UpdateServerGroupInternalServerError {
	return &UpdateServerGroupInternalServerError{}
}

/*
UpdateServerGroupInternalServerError describes a response with status code 500, with default header values.

internal error
*/
type UpdateServerGroupInternalServerError struct {
	Payload *vproxy_client_model.Error500
}

// IsSuccess returns true when this update server group internal server error response has a 2xx status code
func (o *UpdateServerGroupInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update server group internal server error response has a 3xx status code
func (o *UpdateServerGroupInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update server group internal server error response has a 4xx status code
func (o *UpdateServerGroupInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update server group internal server error response has a 5xx status code
func (o *UpdateServerGroupInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update server group internal server error response a status code equal to that given
func (o *UpdateServerGroupInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update server group internal server error response
func (o *UpdateServerGroupInternalServerError) Code() int {
	return 500
}

func (o *UpdateServerGroupInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /server-group/{sg}][%d] updateServerGroupInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateServerGroupInternalServerError) String() string {
	return fmt.Sprintf("[PUT /server-group/{sg}][%d] updateServerGroupInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateServerGroupInternalServerError) GetPayload() *vproxy_client_model.Error500 {
	return o.Payload
}

func (o *UpdateServerGroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error500)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
