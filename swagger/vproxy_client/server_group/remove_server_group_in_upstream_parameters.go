// Code generated by go-swagger; DO NOT EDIT.

package server_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewRemoveServerGroupInUpstreamParams creates a new RemoveServerGroupInUpstreamParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRemoveServerGroupInUpstreamParams() *RemoveServerGroupInUpstreamParams {
	return &RemoveServerGroupInUpstreamParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRemoveServerGroupInUpstreamParamsWithTimeout creates a new RemoveServerGroupInUpstreamParams object
// with the ability to set a timeout on a request.
func NewRemoveServerGroupInUpstreamParamsWithTimeout(timeout time.Duration) *RemoveServerGroupInUpstreamParams {
	return &RemoveServerGroupInUpstreamParams{
		timeout: timeout,
	}
}

// NewRemoveServerGroupInUpstreamParamsWithContext creates a new RemoveServerGroupInUpstreamParams object
// with the ability to set a context for a request.
func NewRemoveServerGroupInUpstreamParamsWithContext(ctx context.Context) *RemoveServerGroupInUpstreamParams {
	return &RemoveServerGroupInUpstreamParams{
		Context: ctx,
	}
}

// NewRemoveServerGroupInUpstreamParamsWithHTTPClient creates a new RemoveServerGroupInUpstreamParams object
// with the ability to set a custom HTTPClient for a request.
func NewRemoveServerGroupInUpstreamParamsWithHTTPClient(client *http.Client) *RemoveServerGroupInUpstreamParams {
	return &RemoveServerGroupInUpstreamParams{
		HTTPClient: client,
	}
}

/*
RemoveServerGroupInUpstreamParams contains all the parameters to send to the API endpoint

	for the remove server group in upstream operation.

	Typically these are written to a http.Request.
*/
type RemoveServerGroupInUpstreamParams struct {

	/* Sg.

	   name of the server-group
	*/
	Sg string

	/* Ups.

	   name of the upstream
	*/
	Ups string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the remove server group in upstream params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RemoveServerGroupInUpstreamParams) WithDefaults() *RemoveServerGroupInUpstreamParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the remove server group in upstream params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RemoveServerGroupInUpstreamParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the remove server group in upstream params
func (o *RemoveServerGroupInUpstreamParams) WithTimeout(timeout time.Duration) *RemoveServerGroupInUpstreamParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the remove server group in upstream params
func (o *RemoveServerGroupInUpstreamParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the remove server group in upstream params
func (o *RemoveServerGroupInUpstreamParams) WithContext(ctx context.Context) *RemoveServerGroupInUpstreamParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the remove server group in upstream params
func (o *RemoveServerGroupInUpstreamParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the remove server group in upstream params
func (o *RemoveServerGroupInUpstreamParams) WithHTTPClient(client *http.Client) *RemoveServerGroupInUpstreamParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the remove server group in upstream params
func (o *RemoveServerGroupInUpstreamParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSg adds the sg to the remove server group in upstream params
func (o *RemoveServerGroupInUpstreamParams) WithSg(sg string) *RemoveServerGroupInUpstreamParams {
	o.SetSg(sg)
	return o
}

// SetSg adds the sg to the remove server group in upstream params
func (o *RemoveServerGroupInUpstreamParams) SetSg(sg string) {
	o.Sg = sg
}

// WithUps adds the ups to the remove server group in upstream params
func (o *RemoveServerGroupInUpstreamParams) WithUps(ups string) *RemoveServerGroupInUpstreamParams {
	o.SetUps(ups)
	return o
}

// SetUps adds the ups to the remove server group in upstream params
func (o *RemoveServerGroupInUpstreamParams) SetUps(ups string) {
	o.Ups = ups
}

// WriteToRequest writes these params to a swagger request
func (o *RemoveServerGroupInUpstreamParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param sg
	if err := r.SetPathParam("sg", o.Sg); err != nil {
		return err
	}

	// path param ups
	if err := r.SetPathParam("ups", o.Ups); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
