// Code generated by go-swagger; DO NOT EDIT.

package server_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vproxy-tools/vpctl/swagger/vproxy_client_model"
)

// GetServerGroupReader is a Reader for the GetServerGroup structure.
type GetServerGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetServerGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetServerGroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetServerGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetServerGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetServerGroupConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetServerGroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetServerGroupOK creates a GetServerGroupOK with default headers values
func NewGetServerGroupOK() *GetServerGroupOK {
	return &GetServerGroupOK{}
}

/*
GetServerGroupOK describes a response with status code 200, with default header values.

ok
*/
type GetServerGroupOK struct {
	Payload *vproxy_client_model.ServerGroup
}

// IsSuccess returns true when this get server group o k response has a 2xx status code
func (o *GetServerGroupOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get server group o k response has a 3xx status code
func (o *GetServerGroupOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get server group o k response has a 4xx status code
func (o *GetServerGroupOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get server group o k response has a 5xx status code
func (o *GetServerGroupOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get server group o k response a status code equal to that given
func (o *GetServerGroupOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get server group o k response
func (o *GetServerGroupOK) Code() int {
	return 200
}

func (o *GetServerGroupOK) Error() string {
	return fmt.Sprintf("[GET /server-group/{sg}][%d] getServerGroupOK  %+v", 200, o.Payload)
}

func (o *GetServerGroupOK) String() string {
	return fmt.Sprintf("[GET /server-group/{sg}][%d] getServerGroupOK  %+v", 200, o.Payload)
}

func (o *GetServerGroupOK) GetPayload() *vproxy_client_model.ServerGroup {
	return o.Payload
}

func (o *GetServerGroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.ServerGroup)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServerGroupBadRequest creates a GetServerGroupBadRequest with default headers values
func NewGetServerGroupBadRequest() *GetServerGroupBadRequest {
	return &GetServerGroupBadRequest{}
}

/*
GetServerGroupBadRequest describes a response with status code 400, with default header values.

invalid input parameters
*/
type GetServerGroupBadRequest struct {
	Payload *vproxy_client_model.Error400
}

// IsSuccess returns true when this get server group bad request response has a 2xx status code
func (o *GetServerGroupBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get server group bad request response has a 3xx status code
func (o *GetServerGroupBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get server group bad request response has a 4xx status code
func (o *GetServerGroupBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get server group bad request response has a 5xx status code
func (o *GetServerGroupBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get server group bad request response a status code equal to that given
func (o *GetServerGroupBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get server group bad request response
func (o *GetServerGroupBadRequest) Code() int {
	return 400
}

func (o *GetServerGroupBadRequest) Error() string {
	return fmt.Sprintf("[GET /server-group/{sg}][%d] getServerGroupBadRequest  %+v", 400, o.Payload)
}

func (o *GetServerGroupBadRequest) String() string {
	return fmt.Sprintf("[GET /server-group/{sg}][%d] getServerGroupBadRequest  %+v", 400, o.Payload)
}

func (o *GetServerGroupBadRequest) GetPayload() *vproxy_client_model.Error400 {
	return o.Payload
}

func (o *GetServerGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error400)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServerGroupNotFound creates a GetServerGroupNotFound with default headers values
func NewGetServerGroupNotFound() *GetServerGroupNotFound {
	return &GetServerGroupNotFound{}
}

/*
GetServerGroupNotFound describes a response with status code 404, with default header values.

resource not found
*/
type GetServerGroupNotFound struct {
	Payload *vproxy_client_model.Error404
}

// IsSuccess returns true when this get server group not found response has a 2xx status code
func (o *GetServerGroupNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get server group not found response has a 3xx status code
func (o *GetServerGroupNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get server group not found response has a 4xx status code
func (o *GetServerGroupNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get server group not found response has a 5xx status code
func (o *GetServerGroupNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get server group not found response a status code equal to that given
func (o *GetServerGroupNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get server group not found response
func (o *GetServerGroupNotFound) Code() int {
	return 404
}

func (o *GetServerGroupNotFound) Error() string {
	return fmt.Sprintf("[GET /server-group/{sg}][%d] getServerGroupNotFound  %+v", 404, o.Payload)
}

func (o *GetServerGroupNotFound) String() string {
	return fmt.Sprintf("[GET /server-group/{sg}][%d] getServerGroupNotFound  %+v", 404, o.Payload)
}

func (o *GetServerGroupNotFound) GetPayload() *vproxy_client_model.Error404 {
	return o.Payload
}

func (o *GetServerGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error404)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServerGroupConflict creates a GetServerGroupConflict with default headers values
func NewGetServerGroupConflict() *GetServerGroupConflict {
	return &GetServerGroupConflict{}
}

/*
GetServerGroupConflict describes a response with status code 409, with default header values.

conflict
*/
type GetServerGroupConflict struct {
	Payload *vproxy_client_model.Error409
}

// IsSuccess returns true when this get server group conflict response has a 2xx status code
func (o *GetServerGroupConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get server group conflict response has a 3xx status code
func (o *GetServerGroupConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get server group conflict response has a 4xx status code
func (o *GetServerGroupConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this get server group conflict response has a 5xx status code
func (o *GetServerGroupConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this get server group conflict response a status code equal to that given
func (o *GetServerGroupConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the get server group conflict response
func (o *GetServerGroupConflict) Code() int {
	return 409
}

func (o *GetServerGroupConflict) Error() string {
	return fmt.Sprintf("[GET /server-group/{sg}][%d] getServerGroupConflict  %+v", 409, o.Payload)
}

func (o *GetServerGroupConflict) String() string {
	return fmt.Sprintf("[GET /server-group/{sg}][%d] getServerGroupConflict  %+v", 409, o.Payload)
}

func (o *GetServerGroupConflict) GetPayload() *vproxy_client_model.Error409 {
	return o.Payload
}

func (o *GetServerGroupConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error409)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServerGroupInternalServerError creates a GetServerGroupInternalServerError with default headers values
func NewGetServerGroupInternalServerError() *GetServerGroupInternalServerError {
	return &GetServerGroupInternalServerError{}
}

/*
GetServerGroupInternalServerError describes a response with status code 500, with default header values.

internal error
*/
type GetServerGroupInternalServerError struct {
	Payload *vproxy_client_model.Error500
}

// IsSuccess returns true when this get server group internal server error response has a 2xx status code
func (o *GetServerGroupInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get server group internal server error response has a 3xx status code
func (o *GetServerGroupInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get server group internal server error response has a 4xx status code
func (o *GetServerGroupInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get server group internal server error response has a 5xx status code
func (o *GetServerGroupInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get server group internal server error response a status code equal to that given
func (o *GetServerGroupInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get server group internal server error response
func (o *GetServerGroupInternalServerError) Code() int {
	return 500
}

func (o *GetServerGroupInternalServerError) Error() string {
	return fmt.Sprintf("[GET /server-group/{sg}][%d] getServerGroupInternalServerError  %+v", 500, o.Payload)
}

func (o *GetServerGroupInternalServerError) String() string {
	return fmt.Sprintf("[GET /server-group/{sg}][%d] getServerGroupInternalServerError  %+v", 500, o.Payload)
}

func (o *GetServerGroupInternalServerError) GetPayload() *vproxy_client_model.Error500 {
	return o.Payload
}

func (o *GetServerGroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error500)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
