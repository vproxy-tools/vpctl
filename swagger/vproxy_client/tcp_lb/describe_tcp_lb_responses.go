// Code generated by go-swagger; DO NOT EDIT.

package tcp_lb

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vproxy-tools/vpctl/swagger/vproxy_client_model"
)

// DescribeTCPLbReader is a Reader for the DescribeTCPLb structure.
type DescribeTCPLbReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DescribeTCPLbReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDescribeTCPLbOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDescribeTCPLbBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDescribeTCPLbNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDescribeTCPLbConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDescribeTCPLbInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDescribeTCPLbOK creates a DescribeTCPLbOK with default headers values
func NewDescribeTCPLbOK() *DescribeTCPLbOK {
	return &DescribeTCPLbOK{}
}

/*
DescribeTCPLbOK describes a response with status code 200, with default header values.

ok
*/
type DescribeTCPLbOK struct {
	Payload *vproxy_client_model.TCPLbDetail
}

// IsSuccess returns true when this describe Tcp lb o k response has a 2xx status code
func (o *DescribeTCPLbOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this describe Tcp lb o k response has a 3xx status code
func (o *DescribeTCPLbOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this describe Tcp lb o k response has a 4xx status code
func (o *DescribeTCPLbOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this describe Tcp lb o k response has a 5xx status code
func (o *DescribeTCPLbOK) IsServerError() bool {
	return false
}

// IsCode returns true when this describe Tcp lb o k response a status code equal to that given
func (o *DescribeTCPLbOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the describe Tcp lb o k response
func (o *DescribeTCPLbOK) Code() int {
	return 200
}

func (o *DescribeTCPLbOK) Error() string {
	return fmt.Sprintf("[GET /tcp-lb/{tl}/detail][%d] describeTcpLbOK  %+v", 200, o.Payload)
}

func (o *DescribeTCPLbOK) String() string {
	return fmt.Sprintf("[GET /tcp-lb/{tl}/detail][%d] describeTcpLbOK  %+v", 200, o.Payload)
}

func (o *DescribeTCPLbOK) GetPayload() *vproxy_client_model.TCPLbDetail {
	return o.Payload
}

func (o *DescribeTCPLbOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.TCPLbDetail)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDescribeTCPLbBadRequest creates a DescribeTCPLbBadRequest with default headers values
func NewDescribeTCPLbBadRequest() *DescribeTCPLbBadRequest {
	return &DescribeTCPLbBadRequest{}
}

/*
DescribeTCPLbBadRequest describes a response with status code 400, with default header values.

invalid input parameters
*/
type DescribeTCPLbBadRequest struct {
	Payload *vproxy_client_model.Error400
}

// IsSuccess returns true when this describe Tcp lb bad request response has a 2xx status code
func (o *DescribeTCPLbBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this describe Tcp lb bad request response has a 3xx status code
func (o *DescribeTCPLbBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this describe Tcp lb bad request response has a 4xx status code
func (o *DescribeTCPLbBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this describe Tcp lb bad request response has a 5xx status code
func (o *DescribeTCPLbBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this describe Tcp lb bad request response a status code equal to that given
func (o *DescribeTCPLbBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the describe Tcp lb bad request response
func (o *DescribeTCPLbBadRequest) Code() int {
	return 400
}

func (o *DescribeTCPLbBadRequest) Error() string {
	return fmt.Sprintf("[GET /tcp-lb/{tl}/detail][%d] describeTcpLbBadRequest  %+v", 400, o.Payload)
}

func (o *DescribeTCPLbBadRequest) String() string {
	return fmt.Sprintf("[GET /tcp-lb/{tl}/detail][%d] describeTcpLbBadRequest  %+v", 400, o.Payload)
}

func (o *DescribeTCPLbBadRequest) GetPayload() *vproxy_client_model.Error400 {
	return o.Payload
}

func (o *DescribeTCPLbBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error400)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDescribeTCPLbNotFound creates a DescribeTCPLbNotFound with default headers values
func NewDescribeTCPLbNotFound() *DescribeTCPLbNotFound {
	return &DescribeTCPLbNotFound{}
}

/*
DescribeTCPLbNotFound describes a response with status code 404, with default header values.

resource not found
*/
type DescribeTCPLbNotFound struct {
	Payload *vproxy_client_model.Error404
}

// IsSuccess returns true when this describe Tcp lb not found response has a 2xx status code
func (o *DescribeTCPLbNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this describe Tcp lb not found response has a 3xx status code
func (o *DescribeTCPLbNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this describe Tcp lb not found response has a 4xx status code
func (o *DescribeTCPLbNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this describe Tcp lb not found response has a 5xx status code
func (o *DescribeTCPLbNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this describe Tcp lb not found response a status code equal to that given
func (o *DescribeTCPLbNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the describe Tcp lb not found response
func (o *DescribeTCPLbNotFound) Code() int {
	return 404
}

func (o *DescribeTCPLbNotFound) Error() string {
	return fmt.Sprintf("[GET /tcp-lb/{tl}/detail][%d] describeTcpLbNotFound  %+v", 404, o.Payload)
}

func (o *DescribeTCPLbNotFound) String() string {
	return fmt.Sprintf("[GET /tcp-lb/{tl}/detail][%d] describeTcpLbNotFound  %+v", 404, o.Payload)
}

func (o *DescribeTCPLbNotFound) GetPayload() *vproxy_client_model.Error404 {
	return o.Payload
}

func (o *DescribeTCPLbNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error404)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDescribeTCPLbConflict creates a DescribeTCPLbConflict with default headers values
func NewDescribeTCPLbConflict() *DescribeTCPLbConflict {
	return &DescribeTCPLbConflict{}
}

/*
DescribeTCPLbConflict describes a response with status code 409, with default header values.

conflict
*/
type DescribeTCPLbConflict struct {
	Payload *vproxy_client_model.Error409
}

// IsSuccess returns true when this describe Tcp lb conflict response has a 2xx status code
func (o *DescribeTCPLbConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this describe Tcp lb conflict response has a 3xx status code
func (o *DescribeTCPLbConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this describe Tcp lb conflict response has a 4xx status code
func (o *DescribeTCPLbConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this describe Tcp lb conflict response has a 5xx status code
func (o *DescribeTCPLbConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this describe Tcp lb conflict response a status code equal to that given
func (o *DescribeTCPLbConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the describe Tcp lb conflict response
func (o *DescribeTCPLbConflict) Code() int {
	return 409
}

func (o *DescribeTCPLbConflict) Error() string {
	return fmt.Sprintf("[GET /tcp-lb/{tl}/detail][%d] describeTcpLbConflict  %+v", 409, o.Payload)
}

func (o *DescribeTCPLbConflict) String() string {
	return fmt.Sprintf("[GET /tcp-lb/{tl}/detail][%d] describeTcpLbConflict  %+v", 409, o.Payload)
}

func (o *DescribeTCPLbConflict) GetPayload() *vproxy_client_model.Error409 {
	return o.Payload
}

func (o *DescribeTCPLbConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error409)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDescribeTCPLbInternalServerError creates a DescribeTCPLbInternalServerError with default headers values
func NewDescribeTCPLbInternalServerError() *DescribeTCPLbInternalServerError {
	return &DescribeTCPLbInternalServerError{}
}

/*
DescribeTCPLbInternalServerError describes a response with status code 500, with default header values.

internal error
*/
type DescribeTCPLbInternalServerError struct {
	Payload *vproxy_client_model.Error500
}

// IsSuccess returns true when this describe Tcp lb internal server error response has a 2xx status code
func (o *DescribeTCPLbInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this describe Tcp lb internal server error response has a 3xx status code
func (o *DescribeTCPLbInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this describe Tcp lb internal server error response has a 4xx status code
func (o *DescribeTCPLbInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this describe Tcp lb internal server error response has a 5xx status code
func (o *DescribeTCPLbInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this describe Tcp lb internal server error response a status code equal to that given
func (o *DescribeTCPLbInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the describe Tcp lb internal server error response
func (o *DescribeTCPLbInternalServerError) Code() int {
	return 500
}

func (o *DescribeTCPLbInternalServerError) Error() string {
	return fmt.Sprintf("[GET /tcp-lb/{tl}/detail][%d] describeTcpLbInternalServerError  %+v", 500, o.Payload)
}

func (o *DescribeTCPLbInternalServerError) String() string {
	return fmt.Sprintf("[GET /tcp-lb/{tl}/detail][%d] describeTcpLbInternalServerError  %+v", 500, o.Payload)
}

func (o *DescribeTCPLbInternalServerError) GetPayload() *vproxy_client_model.Error500 {
	return o.Payload
}

func (o *DescribeTCPLbInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error500)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
