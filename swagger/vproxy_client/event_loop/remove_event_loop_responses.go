// Code generated by go-swagger; DO NOT EDIT.

package event_loop

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vproxy-tools/vpctl/swagger/vproxy_client_model"
)

// RemoveEventLoopReader is a Reader for the RemoveEventLoop structure.
type RemoveEventLoopReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RemoveEventLoopReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewRemoveEventLoopNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRemoveEventLoopBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRemoveEventLoopNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewRemoveEventLoopConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRemoveEventLoopInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRemoveEventLoopNoContent creates a RemoveEventLoopNoContent with default headers values
func NewRemoveEventLoopNoContent() *RemoveEventLoopNoContent {
	return &RemoveEventLoopNoContent{}
}

/*
RemoveEventLoopNoContent describes a response with status code 204, with default header values.

ok
*/
type RemoveEventLoopNoContent struct {
}

// IsSuccess returns true when this remove event loop no content response has a 2xx status code
func (o *RemoveEventLoopNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this remove event loop no content response has a 3xx status code
func (o *RemoveEventLoopNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove event loop no content response has a 4xx status code
func (o *RemoveEventLoopNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this remove event loop no content response has a 5xx status code
func (o *RemoveEventLoopNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this remove event loop no content response a status code equal to that given
func (o *RemoveEventLoopNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the remove event loop no content response
func (o *RemoveEventLoopNoContent) Code() int {
	return 204
}

func (o *RemoveEventLoopNoContent) Error() string {
	return fmt.Sprintf("[DELETE /event-loop-group/{elg}/event-loop/{el}][%d] removeEventLoopNoContent ", 204)
}

func (o *RemoveEventLoopNoContent) String() string {
	return fmt.Sprintf("[DELETE /event-loop-group/{elg}/event-loop/{el}][%d] removeEventLoopNoContent ", 204)
}

func (o *RemoveEventLoopNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemoveEventLoopBadRequest creates a RemoveEventLoopBadRequest with default headers values
func NewRemoveEventLoopBadRequest() *RemoveEventLoopBadRequest {
	return &RemoveEventLoopBadRequest{}
}

/*
RemoveEventLoopBadRequest describes a response with status code 400, with default header values.

invalid input parameters
*/
type RemoveEventLoopBadRequest struct {
	Payload *vproxy_client_model.Error400
}

// IsSuccess returns true when this remove event loop bad request response has a 2xx status code
func (o *RemoveEventLoopBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove event loop bad request response has a 3xx status code
func (o *RemoveEventLoopBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove event loop bad request response has a 4xx status code
func (o *RemoveEventLoopBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove event loop bad request response has a 5xx status code
func (o *RemoveEventLoopBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this remove event loop bad request response a status code equal to that given
func (o *RemoveEventLoopBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the remove event loop bad request response
func (o *RemoveEventLoopBadRequest) Code() int {
	return 400
}

func (o *RemoveEventLoopBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /event-loop-group/{elg}/event-loop/{el}][%d] removeEventLoopBadRequest  %+v", 400, o.Payload)
}

func (o *RemoveEventLoopBadRequest) String() string {
	return fmt.Sprintf("[DELETE /event-loop-group/{elg}/event-loop/{el}][%d] removeEventLoopBadRequest  %+v", 400, o.Payload)
}

func (o *RemoveEventLoopBadRequest) GetPayload() *vproxy_client_model.Error400 {
	return o.Payload
}

func (o *RemoveEventLoopBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error400)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveEventLoopNotFound creates a RemoveEventLoopNotFound with default headers values
func NewRemoveEventLoopNotFound() *RemoveEventLoopNotFound {
	return &RemoveEventLoopNotFound{}
}

/*
RemoveEventLoopNotFound describes a response with status code 404, with default header values.

resource not found
*/
type RemoveEventLoopNotFound struct {
	Payload *vproxy_client_model.Error404
}

// IsSuccess returns true when this remove event loop not found response has a 2xx status code
func (o *RemoveEventLoopNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove event loop not found response has a 3xx status code
func (o *RemoveEventLoopNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove event loop not found response has a 4xx status code
func (o *RemoveEventLoopNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove event loop not found response has a 5xx status code
func (o *RemoveEventLoopNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this remove event loop not found response a status code equal to that given
func (o *RemoveEventLoopNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the remove event loop not found response
func (o *RemoveEventLoopNotFound) Code() int {
	return 404
}

func (o *RemoveEventLoopNotFound) Error() string {
	return fmt.Sprintf("[DELETE /event-loop-group/{elg}/event-loop/{el}][%d] removeEventLoopNotFound  %+v", 404, o.Payload)
}

func (o *RemoveEventLoopNotFound) String() string {
	return fmt.Sprintf("[DELETE /event-loop-group/{elg}/event-loop/{el}][%d] removeEventLoopNotFound  %+v", 404, o.Payload)
}

func (o *RemoveEventLoopNotFound) GetPayload() *vproxy_client_model.Error404 {
	return o.Payload
}

func (o *RemoveEventLoopNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error404)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveEventLoopConflict creates a RemoveEventLoopConflict with default headers values
func NewRemoveEventLoopConflict() *RemoveEventLoopConflict {
	return &RemoveEventLoopConflict{}
}

/*
RemoveEventLoopConflict describes a response with status code 409, with default header values.

conflict
*/
type RemoveEventLoopConflict struct {
	Payload *vproxy_client_model.Error409
}

// IsSuccess returns true when this remove event loop conflict response has a 2xx status code
func (o *RemoveEventLoopConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove event loop conflict response has a 3xx status code
func (o *RemoveEventLoopConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove event loop conflict response has a 4xx status code
func (o *RemoveEventLoopConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove event loop conflict response has a 5xx status code
func (o *RemoveEventLoopConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this remove event loop conflict response a status code equal to that given
func (o *RemoveEventLoopConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the remove event loop conflict response
func (o *RemoveEventLoopConflict) Code() int {
	return 409
}

func (o *RemoveEventLoopConflict) Error() string {
	return fmt.Sprintf("[DELETE /event-loop-group/{elg}/event-loop/{el}][%d] removeEventLoopConflict  %+v", 409, o.Payload)
}

func (o *RemoveEventLoopConflict) String() string {
	return fmt.Sprintf("[DELETE /event-loop-group/{elg}/event-loop/{el}][%d] removeEventLoopConflict  %+v", 409, o.Payload)
}

func (o *RemoveEventLoopConflict) GetPayload() *vproxy_client_model.Error409 {
	return o.Payload
}

func (o *RemoveEventLoopConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error409)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveEventLoopInternalServerError creates a RemoveEventLoopInternalServerError with default headers values
func NewRemoveEventLoopInternalServerError() *RemoveEventLoopInternalServerError {
	return &RemoveEventLoopInternalServerError{}
}

/*
RemoveEventLoopInternalServerError describes a response with status code 500, with default header values.

internal error
*/
type RemoveEventLoopInternalServerError struct {
	Payload *vproxy_client_model.Error500
}

// IsSuccess returns true when this remove event loop internal server error response has a 2xx status code
func (o *RemoveEventLoopInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove event loop internal server error response has a 3xx status code
func (o *RemoveEventLoopInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove event loop internal server error response has a 4xx status code
func (o *RemoveEventLoopInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this remove event loop internal server error response has a 5xx status code
func (o *RemoveEventLoopInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this remove event loop internal server error response a status code equal to that given
func (o *RemoveEventLoopInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the remove event loop internal server error response
func (o *RemoveEventLoopInternalServerError) Code() int {
	return 500
}

func (o *RemoveEventLoopInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /event-loop-group/{elg}/event-loop/{el}][%d] removeEventLoopInternalServerError  %+v", 500, o.Payload)
}

func (o *RemoveEventLoopInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /event-loop-group/{elg}/event-loop/{el}][%d] removeEventLoopInternalServerError  %+v", 500, o.Payload)
}

func (o *RemoveEventLoopInternalServerError) GetPayload() *vproxy_client_model.Error500 {
	return o.Payload
}

func (o *RemoveEventLoopInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error500)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
