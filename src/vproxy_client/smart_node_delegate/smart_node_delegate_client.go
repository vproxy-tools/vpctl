// Code generated by go-swagger; DO NOT EDIT.

package smart_node_delegate

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new smart node delegate API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for smart node delegate API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddSmartNodeDelegate adds smart node delegate
*/
func (a *Client) AddSmartNodeDelegate(params *AddSmartNodeDelegateParams) (*AddSmartNodeDelegateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddSmartNodeDelegateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addSmartNodeDelegate",
		Method:             "POST",
		PathPattern:        "/smart-node-delegate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddSmartNodeDelegateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddSmartNodeDelegateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addSmartNodeDelegate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DescribeSmartNodeDelegate gets detailed info of one smart node delegate
*/
func (a *Client) DescribeSmartNodeDelegate(params *DescribeSmartNodeDelegateParams) (*DescribeSmartNodeDelegateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeSmartNodeDelegateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "describeSmartNodeDelegate",
		Method:             "GET",
		PathPattern:        "/smart-node-delegate/{snd}/detail",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeSmartNodeDelegateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeSmartNodeDelegateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for describeSmartNodeDelegate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSmartNodeDelegate gets smart node delegate
*/
func (a *Client) GetSmartNodeDelegate(params *GetSmartNodeDelegateParams) (*GetSmartNodeDelegateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSmartNodeDelegateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSmartNodeDelegate",
		Method:             "GET",
		PathPattern:        "/smart-node-delegate/{snd}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSmartNodeDelegateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSmartNodeDelegateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSmartNodeDelegate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListSmartNodeDelegate retrieves smart node delegate list
*/
func (a *Client) ListSmartNodeDelegate(params *ListSmartNodeDelegateParams) (*ListSmartNodeDelegateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSmartNodeDelegateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listSmartNodeDelegate",
		Method:             "GET",
		PathPattern:        "/smart-node-delegate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListSmartNodeDelegateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSmartNodeDelegateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listSmartNodeDelegate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveSmartNodeDelegate removes smart node delegate
*/
func (a *Client) RemoveSmartNodeDelegate(params *RemoveSmartNodeDelegateParams) (*RemoveSmartNodeDelegateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveSmartNodeDelegateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeSmartNodeDelegate",
		Method:             "DELETE",
		PathPattern:        "/smart-node-delegate/{snd}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveSmartNodeDelegateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveSmartNodeDelegateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeSmartNodeDelegate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
