// Code generated by go-swagger; DO NOT EDIT.

package tcp_lb

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new tcp lb API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tcp lb API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddTCPLb adds tcp lb
*/
func (a *Client) AddTCPLb(params *AddTCPLbParams) (*AddTCPLbNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddTCPLbParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addTcpLb",
		Method:             "POST",
		PathPattern:        "/tcp-lb",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddTCPLbReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddTCPLbNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addTcpLb: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DescribeTCPLb gets detailed info of one tcp lb
*/
func (a *Client) DescribeTCPLb(params *DescribeTCPLbParams) (*DescribeTCPLbOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeTCPLbParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "describeTcpLb",
		Method:             "GET",
		PathPattern:        "/tcp-lb/{tl}/detail",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeTCPLbReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeTCPLbOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for describeTcpLb: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTCPLb gets tcp lb
*/
func (a *Client) GetTCPLb(params *GetTCPLbParams) (*GetTCPLbOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTCPLbParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTcpLb",
		Method:             "GET",
		PathPattern:        "/tcp-lb/{tl}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTCPLbReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTCPLbOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTcpLb: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListTCPLb retrieves tcp lb list
*/
func (a *Client) ListTCPLb(params *ListTCPLbParams) (*ListTCPLbOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTCPLbParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listTcpLb",
		Method:             "GET",
		PathPattern:        "/tcp-lb",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListTCPLbReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTCPLbOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listTcpLb: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveTCPLb removes tcp lb
*/
func (a *Client) RemoveTCPLb(params *RemoveTCPLbParams) (*RemoveTCPLbNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveTCPLbParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeTcpLb",
		Method:             "DELETE",
		PathPattern:        "/tcp-lb/{tl}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveTCPLbReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveTCPLbNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeTcpLb: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateTCPLb updates tcp lb
*/
func (a *Client) UpdateTCPLb(params *UpdateTCPLbParams) (*UpdateTCPLbNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTCPLbParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateTcpLb",
		Method:             "PUT",
		PathPattern:        "/tcp-lb/{tl}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateTCPLbReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTCPLbNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateTcpLb: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
