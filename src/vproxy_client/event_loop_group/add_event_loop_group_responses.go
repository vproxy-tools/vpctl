// Code generated by go-swagger; DO NOT EDIT.

package event_loop_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	vproxy_client_model "vproxy_client_model"
)

// AddEventLoopGroupReader is a Reader for the AddEventLoopGroup structure.
type AddEventLoopGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddEventLoopGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewAddEventLoopGroupNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddEventLoopGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddEventLoopGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewAddEventLoopGroupConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddEventLoopGroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddEventLoopGroupNoContent creates a AddEventLoopGroupNoContent with default headers values
func NewAddEventLoopGroupNoContent() *AddEventLoopGroupNoContent {
	return &AddEventLoopGroupNoContent{}
}

/*AddEventLoopGroupNoContent handles this case with default header values.

ok
*/
type AddEventLoopGroupNoContent struct {
}

func (o *AddEventLoopGroupNoContent) Error() string {
	return fmt.Sprintf("[POST /event-loop-group][%d] addEventLoopGroupNoContent ", 204)
}

func (o *AddEventLoopGroupNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddEventLoopGroupBadRequest creates a AddEventLoopGroupBadRequest with default headers values
func NewAddEventLoopGroupBadRequest() *AddEventLoopGroupBadRequest {
	return &AddEventLoopGroupBadRequest{}
}

/*AddEventLoopGroupBadRequest handles this case with default header values.

invalid input parameters
*/
type AddEventLoopGroupBadRequest struct {
	Payload *vproxy_client_model.Error400
}

func (o *AddEventLoopGroupBadRequest) Error() string {
	return fmt.Sprintf("[POST /event-loop-group][%d] addEventLoopGroupBadRequest  %+v", 400, o.Payload)
}

func (o *AddEventLoopGroupBadRequest) GetPayload() *vproxy_client_model.Error400 {
	return o.Payload
}

func (o *AddEventLoopGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error400)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddEventLoopGroupNotFound creates a AddEventLoopGroupNotFound with default headers values
func NewAddEventLoopGroupNotFound() *AddEventLoopGroupNotFound {
	return &AddEventLoopGroupNotFound{}
}

/*AddEventLoopGroupNotFound handles this case with default header values.

resource not found
*/
type AddEventLoopGroupNotFound struct {
	Payload *vproxy_client_model.Error404
}

func (o *AddEventLoopGroupNotFound) Error() string {
	return fmt.Sprintf("[POST /event-loop-group][%d] addEventLoopGroupNotFound  %+v", 404, o.Payload)
}

func (o *AddEventLoopGroupNotFound) GetPayload() *vproxy_client_model.Error404 {
	return o.Payload
}

func (o *AddEventLoopGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error404)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddEventLoopGroupConflict creates a AddEventLoopGroupConflict with default headers values
func NewAddEventLoopGroupConflict() *AddEventLoopGroupConflict {
	return &AddEventLoopGroupConflict{}
}

/*AddEventLoopGroupConflict handles this case with default header values.

conflict
*/
type AddEventLoopGroupConflict struct {
	Payload *vproxy_client_model.Error409
}

func (o *AddEventLoopGroupConflict) Error() string {
	return fmt.Sprintf("[POST /event-loop-group][%d] addEventLoopGroupConflict  %+v", 409, o.Payload)
}

func (o *AddEventLoopGroupConflict) GetPayload() *vproxy_client_model.Error409 {
	return o.Payload
}

func (o *AddEventLoopGroupConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error409)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddEventLoopGroupInternalServerError creates a AddEventLoopGroupInternalServerError with default headers values
func NewAddEventLoopGroupInternalServerError() *AddEventLoopGroupInternalServerError {
	return &AddEventLoopGroupInternalServerError{}
}

/*AddEventLoopGroupInternalServerError handles this case with default header values.

internal error
*/
type AddEventLoopGroupInternalServerError struct {
	Payload *vproxy_client_model.Error500
}

func (o *AddEventLoopGroupInternalServerError) Error() string {
	return fmt.Sprintf("[POST /event-loop-group][%d] addEventLoopGroupInternalServerError  %+v", 500, o.Payload)
}

func (o *AddEventLoopGroupInternalServerError) GetPayload() *vproxy_client_model.Error500 {
	return o.Payload
}

func (o *AddEventLoopGroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error500)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
