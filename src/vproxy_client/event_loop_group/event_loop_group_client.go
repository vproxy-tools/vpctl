// Code generated by go-swagger; DO NOT EDIT.

package event_loop_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new event loop group API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for event loop group API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddEventLoopGroup adds event loop group
*/
func (a *Client) AddEventLoopGroup(params *AddEventLoopGroupParams) (*AddEventLoopGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddEventLoopGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addEventLoopGroup",
		Method:             "POST",
		PathPattern:        "/event-loop-group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddEventLoopGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddEventLoopGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addEventLoopGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DescribeEventLoopGroup gets detailed info of one event loop group
*/
func (a *Client) DescribeEventLoopGroup(params *DescribeEventLoopGroupParams) (*DescribeEventLoopGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeEventLoopGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "describeEventLoopGroup",
		Method:             "GET",
		PathPattern:        "/event-loop-group/{elg}/detail",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeEventLoopGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeEventLoopGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for describeEventLoopGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEventLoopGroup gets event loop group
*/
func (a *Client) GetEventLoopGroup(params *GetEventLoopGroupParams) (*GetEventLoopGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventLoopGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEventLoopGroup",
		Method:             "GET",
		PathPattern:        "/event-loop-group/{elg}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEventLoopGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEventLoopGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEventLoopGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListEventLoopGroup retrieves event loop group list
*/
func (a *Client) ListEventLoopGroup(params *ListEventLoopGroupParams) (*ListEventLoopGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEventLoopGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listEventLoopGroup",
		Method:             "GET",
		PathPattern:        "/event-loop-group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListEventLoopGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListEventLoopGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listEventLoopGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveEventLoopGroup removes event loop group
*/
func (a *Client) RemoveEventLoopGroup(params *RemoveEventLoopGroupParams) (*RemoveEventLoopGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveEventLoopGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeEventLoopGroup",
		Method:             "DELETE",
		PathPattern:        "/event-loop-group/{elg}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveEventLoopGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveEventLoopGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeEventLoopGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
