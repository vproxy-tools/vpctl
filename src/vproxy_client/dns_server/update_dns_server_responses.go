// Code generated by go-swagger; DO NOT EDIT.

package dns_server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// UpdateDNSServerReader is a Reader for the UpdateDNSServer structure.
type UpdateDNSServerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateDNSServerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateDNSServerNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateDNSServerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateDNSServerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateDNSServerNoContent creates a UpdateDNSServerNoContent with default headers values
func NewUpdateDNSServerNoContent() *UpdateDNSServerNoContent {
	return &UpdateDNSServerNoContent{}
}

/*UpdateDNSServerNoContent handles this case with default header values.

ok
*/
type UpdateDNSServerNoContent struct {
}

func (o *UpdateDNSServerNoContent) Error() string {
	return fmt.Sprintf("[PUT /dns-server/{dns}][%d] updateDnsServerNoContent ", 204)
}

func (o *UpdateDNSServerNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDNSServerBadRequest creates a UpdateDNSServerBadRequest with default headers values
func NewUpdateDNSServerBadRequest() *UpdateDNSServerBadRequest {
	return &UpdateDNSServerBadRequest{}
}

/*UpdateDNSServerBadRequest handles this case with default header values.

Invalid input
*/
type UpdateDNSServerBadRequest struct {
}

func (o *UpdateDNSServerBadRequest) Error() string {
	return fmt.Sprintf("[PUT /dns-server/{dns}][%d] updateDnsServerBadRequest ", 400)
}

func (o *UpdateDNSServerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDNSServerNotFound creates a UpdateDNSServerNotFound with default headers values
func NewUpdateDNSServerNotFound() *UpdateDNSServerNotFound {
	return &UpdateDNSServerNotFound{}
}

/*UpdateDNSServerNotFound handles this case with default header values.

DnsServer not found
*/
type UpdateDNSServerNotFound struct {
}

func (o *UpdateDNSServerNotFound) Error() string {
	return fmt.Sprintf("[PUT /dns-server/{dns}][%d] updateDnsServerNotFound ", 404)
}

func (o *UpdateDNSServerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
