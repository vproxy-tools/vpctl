// Code generated by go-swagger; DO NOT EDIT.

package dns_server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	vproxy_client_model "vproxy_client_model"
)

// UpdateDNSServerReader is a Reader for the UpdateDNSServer structure.
type UpdateDNSServerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateDNSServerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateDNSServerNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateDNSServerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateDNSServerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateDNSServerConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateDNSServerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateDNSServerNoContent creates a UpdateDNSServerNoContent with default headers values
func NewUpdateDNSServerNoContent() *UpdateDNSServerNoContent {
	return &UpdateDNSServerNoContent{}
}

/*UpdateDNSServerNoContent handles this case with default header values.

ok
*/
type UpdateDNSServerNoContent struct {
}

func (o *UpdateDNSServerNoContent) Error() string {
	return fmt.Sprintf("[PUT /dns-server/{dns}][%d] updateDnsServerNoContent ", 204)
}

func (o *UpdateDNSServerNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDNSServerBadRequest creates a UpdateDNSServerBadRequest with default headers values
func NewUpdateDNSServerBadRequest() *UpdateDNSServerBadRequest {
	return &UpdateDNSServerBadRequest{}
}

/*UpdateDNSServerBadRequest handles this case with default header values.

invalid input parameters
*/
type UpdateDNSServerBadRequest struct {
	Payload *vproxy_client_model.Error400
}

func (o *UpdateDNSServerBadRequest) Error() string {
	return fmt.Sprintf("[PUT /dns-server/{dns}][%d] updateDnsServerBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateDNSServerBadRequest) GetPayload() *vproxy_client_model.Error400 {
	return o.Payload
}

func (o *UpdateDNSServerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error400)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDNSServerNotFound creates a UpdateDNSServerNotFound with default headers values
func NewUpdateDNSServerNotFound() *UpdateDNSServerNotFound {
	return &UpdateDNSServerNotFound{}
}

/*UpdateDNSServerNotFound handles this case with default header values.

resource not found
*/
type UpdateDNSServerNotFound struct {
	Payload *vproxy_client_model.Error404
}

func (o *UpdateDNSServerNotFound) Error() string {
	return fmt.Sprintf("[PUT /dns-server/{dns}][%d] updateDnsServerNotFound  %+v", 404, o.Payload)
}

func (o *UpdateDNSServerNotFound) GetPayload() *vproxy_client_model.Error404 {
	return o.Payload
}

func (o *UpdateDNSServerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error404)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDNSServerConflict creates a UpdateDNSServerConflict with default headers values
func NewUpdateDNSServerConflict() *UpdateDNSServerConflict {
	return &UpdateDNSServerConflict{}
}

/*UpdateDNSServerConflict handles this case with default header values.

conflict
*/
type UpdateDNSServerConflict struct {
	Payload *vproxy_client_model.Error409
}

func (o *UpdateDNSServerConflict) Error() string {
	return fmt.Sprintf("[PUT /dns-server/{dns}][%d] updateDnsServerConflict  %+v", 409, o.Payload)
}

func (o *UpdateDNSServerConflict) GetPayload() *vproxy_client_model.Error409 {
	return o.Payload
}

func (o *UpdateDNSServerConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error409)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDNSServerInternalServerError creates a UpdateDNSServerInternalServerError with default headers values
func NewUpdateDNSServerInternalServerError() *UpdateDNSServerInternalServerError {
	return &UpdateDNSServerInternalServerError{}
}

/*UpdateDNSServerInternalServerError handles this case with default header values.

internal error
*/
type UpdateDNSServerInternalServerError struct {
	Payload *vproxy_client_model.Error500
}

func (o *UpdateDNSServerInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /dns-server/{dns}][%d] updateDnsServerInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateDNSServerInternalServerError) GetPayload() *vproxy_client_model.Error500 {
	return o.Payload
}

func (o *UpdateDNSServerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error500)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
