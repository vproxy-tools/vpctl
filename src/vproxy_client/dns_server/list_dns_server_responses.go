// Code generated by go-swagger; DO NOT EDIT.

package dns_server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	vproxy_client_model "vproxy_client_model"
)

// ListDNSServerReader is a Reader for the ListDNSServer structure.
type ListDNSServerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListDNSServerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListDNSServerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListDNSServerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewListDNSServerConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListDNSServerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListDNSServerOK creates a ListDNSServerOK with default headers values
func NewListDNSServerOK() *ListDNSServerOK {
	return &ListDNSServerOK{}
}

/*ListDNSServerOK handles this case with default header values.

ok
*/
type ListDNSServerOK struct {
	Payload []*vproxy_client_model.DNSServer
}

func (o *ListDNSServerOK) Error() string {
	return fmt.Sprintf("[GET /dns-server][%d] listDnsServerOK  %+v", 200, o.Payload)
}

func (o *ListDNSServerOK) GetPayload() []*vproxy_client_model.DNSServer {
	return o.Payload
}

func (o *ListDNSServerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListDNSServerBadRequest creates a ListDNSServerBadRequest with default headers values
func NewListDNSServerBadRequest() *ListDNSServerBadRequest {
	return &ListDNSServerBadRequest{}
}

/*ListDNSServerBadRequest handles this case with default header values.

invalid input parameters
*/
type ListDNSServerBadRequest struct {
	Payload *vproxy_client_model.Error400
}

func (o *ListDNSServerBadRequest) Error() string {
	return fmt.Sprintf("[GET /dns-server][%d] listDnsServerBadRequest  %+v", 400, o.Payload)
}

func (o *ListDNSServerBadRequest) GetPayload() *vproxy_client_model.Error400 {
	return o.Payload
}

func (o *ListDNSServerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error400)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListDNSServerConflict creates a ListDNSServerConflict with default headers values
func NewListDNSServerConflict() *ListDNSServerConflict {
	return &ListDNSServerConflict{}
}

/*ListDNSServerConflict handles this case with default header values.

conflict
*/
type ListDNSServerConflict struct {
	Payload *vproxy_client_model.Error409
}

func (o *ListDNSServerConflict) Error() string {
	return fmt.Sprintf("[GET /dns-server][%d] listDnsServerConflict  %+v", 409, o.Payload)
}

func (o *ListDNSServerConflict) GetPayload() *vproxy_client_model.Error409 {
	return o.Payload
}

func (o *ListDNSServerConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error409)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListDNSServerInternalServerError creates a ListDNSServerInternalServerError with default headers values
func NewListDNSServerInternalServerError() *ListDNSServerInternalServerError {
	return &ListDNSServerInternalServerError{}
}

/*ListDNSServerInternalServerError handles this case with default header values.

internal error
*/
type ListDNSServerInternalServerError struct {
	Payload *vproxy_client_model.Error500
}

func (o *ListDNSServerInternalServerError) Error() string {
	return fmt.Sprintf("[GET /dns-server][%d] listDnsServerInternalServerError  %+v", 500, o.Payload)
}

func (o *ListDNSServerInternalServerError) GetPayload() *vproxy_client_model.Error500 {
	return o.Payload
}

func (o *ListDNSServerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error500)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
