// Code generated by go-swagger; DO NOT EDIT.

package server_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new server group API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for server group API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddServerGroup adds server group
*/
func (a *Client) AddServerGroup(params *AddServerGroupParams) (*AddServerGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddServerGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addServerGroup",
		Method:             "POST",
		PathPattern:        "/server-group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddServerGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddServerGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addServerGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddServerGroupInUpstream adds server group into upstream
*/
func (a *Client) AddServerGroupInUpstream(params *AddServerGroupInUpstreamParams) (*AddServerGroupInUpstreamNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddServerGroupInUpstreamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addServerGroupInUpstream",
		Method:             "POST",
		PathPattern:        "/upstream/{ups}/server-group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddServerGroupInUpstreamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddServerGroupInUpstreamNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addServerGroupInUpstream: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DescribeServerGroup gets detailed info of one server group
*/
func (a *Client) DescribeServerGroup(params *DescribeServerGroupParams) (*DescribeServerGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeServerGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "describeServerGroup",
		Method:             "GET",
		PathPattern:        "/server-group/{sg}/detail",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeServerGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeServerGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for describeServerGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DescribeServerGroupInUpstream gets detailed info of one server group in upstream
*/
func (a *Client) DescribeServerGroupInUpstream(params *DescribeServerGroupInUpstreamParams) (*DescribeServerGroupInUpstreamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeServerGroupInUpstreamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "describeServerGroupInUpstream",
		Method:             "GET",
		PathPattern:        "/upstream/{ups}/server-group/{sg}/detail",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeServerGroupInUpstreamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeServerGroupInUpstreamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for describeServerGroupInUpstream: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetServerGroup gets server group
*/
func (a *Client) GetServerGroup(params *GetServerGroupParams) (*GetServerGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServerGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServerGroup",
		Method:             "GET",
		PathPattern:        "/server-group/{sg}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServerGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServerGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServerGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetServerGroupInUpstream gets server group in upstream
*/
func (a *Client) GetServerGroupInUpstream(params *GetServerGroupInUpstreamParams) (*GetServerGroupInUpstreamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServerGroupInUpstreamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServerGroupInUpstream",
		Method:             "GET",
		PathPattern:        "/upstream/{ups}/server-group/{sg}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServerGroupInUpstreamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServerGroupInUpstreamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServerGroupInUpstream: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListServerGroup retrieves server group list
*/
func (a *Client) ListServerGroup(params *ListServerGroupParams) (*ListServerGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListServerGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listServerGroup",
		Method:             "GET",
		PathPattern:        "/server-group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListServerGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListServerGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listServerGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListServerGroupInUpstream retrieves server group list from upstream
*/
func (a *Client) ListServerGroupInUpstream(params *ListServerGroupInUpstreamParams) (*ListServerGroupInUpstreamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListServerGroupInUpstreamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listServerGroupInUpstream",
		Method:             "GET",
		PathPattern:        "/upstream/{ups}/server-group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListServerGroupInUpstreamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListServerGroupInUpstreamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listServerGroupInUpstream: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveServerGroup removes server group
*/
func (a *Client) RemoveServerGroup(params *RemoveServerGroupParams) (*RemoveServerGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveServerGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeServerGroup",
		Method:             "DELETE",
		PathPattern:        "/server-group/{sg}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveServerGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveServerGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeServerGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveServerGroupInUpstream removes server group from upstream
*/
func (a *Client) RemoveServerGroupInUpstream(params *RemoveServerGroupInUpstreamParams) (*RemoveServerGroupInUpstreamNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveServerGroupInUpstreamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeServerGroupInUpstream",
		Method:             "DELETE",
		PathPattern:        "/upstream/{ups}/server-group/{sg}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveServerGroupInUpstreamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveServerGroupInUpstreamNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeServerGroupInUpstream: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateServerGroup updates server group
*/
func (a *Client) UpdateServerGroup(params *UpdateServerGroupParams) (*UpdateServerGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServerGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateServerGroup",
		Method:             "PUT",
		PathPattern:        "/server-group/{sg}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateServerGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateServerGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateServerGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateServerGroupInUpstream updates server group in upstream
*/
func (a *Client) UpdateServerGroupInUpstream(params *UpdateServerGroupInUpstreamParams) (*UpdateServerGroupInUpstreamNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServerGroupInUpstreamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateServerGroupInUpstream",
		Method:             "PUT",
		PathPattern:        "/upstream/{ups}/server-group/{sg}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateServerGroupInUpstreamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateServerGroupInUpstreamNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateServerGroupInUpstream: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
