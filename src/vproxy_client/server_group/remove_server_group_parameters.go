// Code generated by go-swagger; DO NOT EDIT.

package server_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewRemoveServerGroupParams creates a new RemoveServerGroupParams object
// with the default values initialized.
func NewRemoveServerGroupParams() *RemoveServerGroupParams {
	var ()
	return &RemoveServerGroupParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRemoveServerGroupParamsWithTimeout creates a new RemoveServerGroupParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRemoveServerGroupParamsWithTimeout(timeout time.Duration) *RemoveServerGroupParams {
	var ()
	return &RemoveServerGroupParams{

		timeout: timeout,
	}
}

// NewRemoveServerGroupParamsWithContext creates a new RemoveServerGroupParams object
// with the default values initialized, and the ability to set a context for a request
func NewRemoveServerGroupParamsWithContext(ctx context.Context) *RemoveServerGroupParams {
	var ()
	return &RemoveServerGroupParams{

		Context: ctx,
	}
}

// NewRemoveServerGroupParamsWithHTTPClient creates a new RemoveServerGroupParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRemoveServerGroupParamsWithHTTPClient(client *http.Client) *RemoveServerGroupParams {
	var ()
	return &RemoveServerGroupParams{
		HTTPClient: client,
	}
}

/*RemoveServerGroupParams contains all the parameters to send to the API endpoint
for the remove server group operation typically these are written to a http.Request
*/
type RemoveServerGroupParams struct {

	/*Sg
	  name of the server-group

	*/
	Sg string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the remove server group params
func (o *RemoveServerGroupParams) WithTimeout(timeout time.Duration) *RemoveServerGroupParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the remove server group params
func (o *RemoveServerGroupParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the remove server group params
func (o *RemoveServerGroupParams) WithContext(ctx context.Context) *RemoveServerGroupParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the remove server group params
func (o *RemoveServerGroupParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the remove server group params
func (o *RemoveServerGroupParams) WithHTTPClient(client *http.Client) *RemoveServerGroupParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the remove server group params
func (o *RemoveServerGroupParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSg adds the sg to the remove server group params
func (o *RemoveServerGroupParams) WithSg(sg string) *RemoveServerGroupParams {
	o.SetSg(sg)
	return o
}

// SetSg adds the sg to the remove server group params
func (o *RemoveServerGroupParams) SetSg(sg string) {
	o.Sg = sg
}

// WriteToRequest writes these params to a swagger request
func (o *RemoveServerGroupParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param sg
	if err := r.SetPathParam("sg", o.Sg); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
