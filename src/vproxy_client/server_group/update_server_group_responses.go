// Code generated by go-swagger; DO NOT EDIT.

package server_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	vproxy_client_model "vproxy_client_model"
)

// UpdateServerGroupReader is a Reader for the UpdateServerGroup structure.
type UpdateServerGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateServerGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateServerGroupNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateServerGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateServerGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateServerGroupConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateServerGroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateServerGroupNoContent creates a UpdateServerGroupNoContent with default headers values
func NewUpdateServerGroupNoContent() *UpdateServerGroupNoContent {
	return &UpdateServerGroupNoContent{}
}

/*UpdateServerGroupNoContent handles this case with default header values.

ok
*/
type UpdateServerGroupNoContent struct {
}

func (o *UpdateServerGroupNoContent) Error() string {
	return fmt.Sprintf("[PUT /server-group/{sg}][%d] updateServerGroupNoContent ", 204)
}

func (o *UpdateServerGroupNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateServerGroupBadRequest creates a UpdateServerGroupBadRequest with default headers values
func NewUpdateServerGroupBadRequest() *UpdateServerGroupBadRequest {
	return &UpdateServerGroupBadRequest{}
}

/*UpdateServerGroupBadRequest handles this case with default header values.

invalid input parameters
*/
type UpdateServerGroupBadRequest struct {
	Payload *vproxy_client_model.Error400
}

func (o *UpdateServerGroupBadRequest) Error() string {
	return fmt.Sprintf("[PUT /server-group/{sg}][%d] updateServerGroupBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateServerGroupBadRequest) GetPayload() *vproxy_client_model.Error400 {
	return o.Payload
}

func (o *UpdateServerGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error400)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServerGroupNotFound creates a UpdateServerGroupNotFound with default headers values
func NewUpdateServerGroupNotFound() *UpdateServerGroupNotFound {
	return &UpdateServerGroupNotFound{}
}

/*UpdateServerGroupNotFound handles this case with default header values.

resource not found
*/
type UpdateServerGroupNotFound struct {
	Payload *vproxy_client_model.Error404
}

func (o *UpdateServerGroupNotFound) Error() string {
	return fmt.Sprintf("[PUT /server-group/{sg}][%d] updateServerGroupNotFound  %+v", 404, o.Payload)
}

func (o *UpdateServerGroupNotFound) GetPayload() *vproxy_client_model.Error404 {
	return o.Payload
}

func (o *UpdateServerGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error404)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServerGroupConflict creates a UpdateServerGroupConflict with default headers values
func NewUpdateServerGroupConflict() *UpdateServerGroupConflict {
	return &UpdateServerGroupConflict{}
}

/*UpdateServerGroupConflict handles this case with default header values.

conflict
*/
type UpdateServerGroupConflict struct {
	Payload *vproxy_client_model.Error409
}

func (o *UpdateServerGroupConflict) Error() string {
	return fmt.Sprintf("[PUT /server-group/{sg}][%d] updateServerGroupConflict  %+v", 409, o.Payload)
}

func (o *UpdateServerGroupConflict) GetPayload() *vproxy_client_model.Error409 {
	return o.Payload
}

func (o *UpdateServerGroupConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error409)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServerGroupInternalServerError creates a UpdateServerGroupInternalServerError with default headers values
func NewUpdateServerGroupInternalServerError() *UpdateServerGroupInternalServerError {
	return &UpdateServerGroupInternalServerError{}
}

/*UpdateServerGroupInternalServerError handles this case with default header values.

internal error
*/
type UpdateServerGroupInternalServerError struct {
	Payload *vproxy_client_model.Error500
}

func (o *UpdateServerGroupInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /server-group/{sg}][%d] updateServerGroupInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateServerGroupInternalServerError) GetPayload() *vproxy_client_model.Error500 {
	return o.Payload
}

func (o *UpdateServerGroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error500)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
