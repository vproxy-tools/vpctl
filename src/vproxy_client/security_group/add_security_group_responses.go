// Code generated by go-swagger; DO NOT EDIT.

package security_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	vproxy_client_model "vproxy_client_model"
)

// AddSecurityGroupReader is a Reader for the AddSecurityGroup structure.
type AddSecurityGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddSecurityGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewAddSecurityGroupNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddSecurityGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddSecurityGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewAddSecurityGroupConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddSecurityGroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddSecurityGroupNoContent creates a AddSecurityGroupNoContent with default headers values
func NewAddSecurityGroupNoContent() *AddSecurityGroupNoContent {
	return &AddSecurityGroupNoContent{}
}

/*AddSecurityGroupNoContent handles this case with default header values.

ok
*/
type AddSecurityGroupNoContent struct {
}

func (o *AddSecurityGroupNoContent) Error() string {
	return fmt.Sprintf("[POST /security-group][%d] addSecurityGroupNoContent ", 204)
}

func (o *AddSecurityGroupNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddSecurityGroupBadRequest creates a AddSecurityGroupBadRequest with default headers values
func NewAddSecurityGroupBadRequest() *AddSecurityGroupBadRequest {
	return &AddSecurityGroupBadRequest{}
}

/*AddSecurityGroupBadRequest handles this case with default header values.

invalid input parameters
*/
type AddSecurityGroupBadRequest struct {
	Payload *vproxy_client_model.Error400
}

func (o *AddSecurityGroupBadRequest) Error() string {
	return fmt.Sprintf("[POST /security-group][%d] addSecurityGroupBadRequest  %+v", 400, o.Payload)
}

func (o *AddSecurityGroupBadRequest) GetPayload() *vproxy_client_model.Error400 {
	return o.Payload
}

func (o *AddSecurityGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error400)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddSecurityGroupNotFound creates a AddSecurityGroupNotFound with default headers values
func NewAddSecurityGroupNotFound() *AddSecurityGroupNotFound {
	return &AddSecurityGroupNotFound{}
}

/*AddSecurityGroupNotFound handles this case with default header values.

resource not found
*/
type AddSecurityGroupNotFound struct {
	Payload *vproxy_client_model.Error404
}

func (o *AddSecurityGroupNotFound) Error() string {
	return fmt.Sprintf("[POST /security-group][%d] addSecurityGroupNotFound  %+v", 404, o.Payload)
}

func (o *AddSecurityGroupNotFound) GetPayload() *vproxy_client_model.Error404 {
	return o.Payload
}

func (o *AddSecurityGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error404)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddSecurityGroupConflict creates a AddSecurityGroupConflict with default headers values
func NewAddSecurityGroupConflict() *AddSecurityGroupConflict {
	return &AddSecurityGroupConflict{}
}

/*AddSecurityGroupConflict handles this case with default header values.

conflict
*/
type AddSecurityGroupConflict struct {
	Payload *vproxy_client_model.Error409
}

func (o *AddSecurityGroupConflict) Error() string {
	return fmt.Sprintf("[POST /security-group][%d] addSecurityGroupConflict  %+v", 409, o.Payload)
}

func (o *AddSecurityGroupConflict) GetPayload() *vproxy_client_model.Error409 {
	return o.Payload
}

func (o *AddSecurityGroupConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error409)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddSecurityGroupInternalServerError creates a AddSecurityGroupInternalServerError with default headers values
func NewAddSecurityGroupInternalServerError() *AddSecurityGroupInternalServerError {
	return &AddSecurityGroupInternalServerError{}
}

/*AddSecurityGroupInternalServerError handles this case with default header values.

internal error
*/
type AddSecurityGroupInternalServerError struct {
	Payload *vproxy_client_model.Error500
}

func (o *AddSecurityGroupInternalServerError) Error() string {
	return fmt.Sprintf("[POST /security-group][%d] addSecurityGroupInternalServerError  %+v", 500, o.Payload)
}

func (o *AddSecurityGroupInternalServerError) GetPayload() *vproxy_client_model.Error500 {
	return o.Payload
}

func (o *AddSecurityGroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error500)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
