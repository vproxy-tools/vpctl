// Code generated by go-swagger; DO NOT EDIT.

package upstream

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	vproxy_client_model "vproxy_client_model"
)

// GetUpstreamReader is a Reader for the GetUpstream structure.
type GetUpstreamReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUpstreamReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUpstreamOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetUpstreamNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetUpstreamOK creates a GetUpstreamOK with default headers values
func NewGetUpstreamOK() *GetUpstreamOK {
	return &GetUpstreamOK{}
}

/*GetUpstreamOK handles this case with default header values.

ok
*/
type GetUpstreamOK struct {
	Payload *vproxy_client_model.Upstream
}

func (o *GetUpstreamOK) Error() string {
	return fmt.Sprintf("[GET /upstream/{ups}][%d] getUpstreamOK  %+v", 200, o.Payload)
}

func (o *GetUpstreamOK) GetPayload() *vproxy_client_model.Upstream {
	return o.Payload
}

func (o *GetUpstreamOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Upstream)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUpstreamNotFound creates a GetUpstreamNotFound with default headers values
func NewGetUpstreamNotFound() *GetUpstreamNotFound {
	return &GetUpstreamNotFound{}
}

/*GetUpstreamNotFound handles this case with default header values.

not found
*/
type GetUpstreamNotFound struct {
}

func (o *GetUpstreamNotFound) Error() string {
	return fmt.Sprintf("[GET /upstream/{ups}][%d] getUpstreamNotFound ", 404)
}

func (o *GetUpstreamNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
