// Code generated by go-swagger; DO NOT EDIT.

package upstream

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	vproxy_client_model "vproxy_client_model"
)

// ListUpstreamReader is a Reader for the ListUpstream structure.
type ListUpstreamReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListUpstreamReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListUpstreamOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListUpstreamBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewListUpstreamConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListUpstreamInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListUpstreamOK creates a ListUpstreamOK with default headers values
func NewListUpstreamOK() *ListUpstreamOK {
	return &ListUpstreamOK{}
}

/*ListUpstreamOK handles this case with default header values.

ok
*/
type ListUpstreamOK struct {
	Payload []*vproxy_client_model.Upstream
}

func (o *ListUpstreamOK) Error() string {
	return fmt.Sprintf("[GET /upstream][%d] listUpstreamOK  %+v", 200, o.Payload)
}

func (o *ListUpstreamOK) GetPayload() []*vproxy_client_model.Upstream {
	return o.Payload
}

func (o *ListUpstreamOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUpstreamBadRequest creates a ListUpstreamBadRequest with default headers values
func NewListUpstreamBadRequest() *ListUpstreamBadRequest {
	return &ListUpstreamBadRequest{}
}

/*ListUpstreamBadRequest handles this case with default header values.

invalid input parameters
*/
type ListUpstreamBadRequest struct {
	Payload *vproxy_client_model.Error400
}

func (o *ListUpstreamBadRequest) Error() string {
	return fmt.Sprintf("[GET /upstream][%d] listUpstreamBadRequest  %+v", 400, o.Payload)
}

func (o *ListUpstreamBadRequest) GetPayload() *vproxy_client_model.Error400 {
	return o.Payload
}

func (o *ListUpstreamBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error400)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUpstreamConflict creates a ListUpstreamConflict with default headers values
func NewListUpstreamConflict() *ListUpstreamConflict {
	return &ListUpstreamConflict{}
}

/*ListUpstreamConflict handles this case with default header values.

conflict
*/
type ListUpstreamConflict struct {
	Payload *vproxy_client_model.Error409
}

func (o *ListUpstreamConflict) Error() string {
	return fmt.Sprintf("[GET /upstream][%d] listUpstreamConflict  %+v", 409, o.Payload)
}

func (o *ListUpstreamConflict) GetPayload() *vproxy_client_model.Error409 {
	return o.Payload
}

func (o *ListUpstreamConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error409)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUpstreamInternalServerError creates a ListUpstreamInternalServerError with default headers values
func NewListUpstreamInternalServerError() *ListUpstreamInternalServerError {
	return &ListUpstreamInternalServerError{}
}

/*ListUpstreamInternalServerError handles this case with default header values.

internal error
*/
type ListUpstreamInternalServerError struct {
	Payload *vproxy_client_model.Error500
}

func (o *ListUpstreamInternalServerError) Error() string {
	return fmt.Sprintf("[GET /upstream][%d] listUpstreamInternalServerError  %+v", 500, o.Payload)
}

func (o *ListUpstreamInternalServerError) GetPayload() *vproxy_client_model.Error500 {
	return o.Payload
}

func (o *ListUpstreamInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error500)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
