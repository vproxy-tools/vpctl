// Code generated by go-swagger; DO NOT EDIT.

package socks5_server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	vproxy_client_model "vproxy_client_model"
)

// UpdateSocks5ServerReader is a Reader for the UpdateSocks5Server structure.
type UpdateSocks5ServerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateSocks5ServerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateSocks5ServerNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateSocks5ServerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateSocks5ServerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateSocks5ServerConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateSocks5ServerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateSocks5ServerNoContent creates a UpdateSocks5ServerNoContent with default headers values
func NewUpdateSocks5ServerNoContent() *UpdateSocks5ServerNoContent {
	return &UpdateSocks5ServerNoContent{}
}

/*UpdateSocks5ServerNoContent handles this case with default header values.

ok
*/
type UpdateSocks5ServerNoContent struct {
}

func (o *UpdateSocks5ServerNoContent) Error() string {
	return fmt.Sprintf("[PUT /socks5-server/{socks5}][%d] updateSocks5ServerNoContent ", 204)
}

func (o *UpdateSocks5ServerNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSocks5ServerBadRequest creates a UpdateSocks5ServerBadRequest with default headers values
func NewUpdateSocks5ServerBadRequest() *UpdateSocks5ServerBadRequest {
	return &UpdateSocks5ServerBadRequest{}
}

/*UpdateSocks5ServerBadRequest handles this case with default header values.

invalid input parameters
*/
type UpdateSocks5ServerBadRequest struct {
	Payload *vproxy_client_model.Error400
}

func (o *UpdateSocks5ServerBadRequest) Error() string {
	return fmt.Sprintf("[PUT /socks5-server/{socks5}][%d] updateSocks5ServerBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateSocks5ServerBadRequest) GetPayload() *vproxy_client_model.Error400 {
	return o.Payload
}

func (o *UpdateSocks5ServerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error400)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSocks5ServerNotFound creates a UpdateSocks5ServerNotFound with default headers values
func NewUpdateSocks5ServerNotFound() *UpdateSocks5ServerNotFound {
	return &UpdateSocks5ServerNotFound{}
}

/*UpdateSocks5ServerNotFound handles this case with default header values.

resource not found
*/
type UpdateSocks5ServerNotFound struct {
	Payload *vproxy_client_model.Error404
}

func (o *UpdateSocks5ServerNotFound) Error() string {
	return fmt.Sprintf("[PUT /socks5-server/{socks5}][%d] updateSocks5ServerNotFound  %+v", 404, o.Payload)
}

func (o *UpdateSocks5ServerNotFound) GetPayload() *vproxy_client_model.Error404 {
	return o.Payload
}

func (o *UpdateSocks5ServerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error404)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSocks5ServerConflict creates a UpdateSocks5ServerConflict with default headers values
func NewUpdateSocks5ServerConflict() *UpdateSocks5ServerConflict {
	return &UpdateSocks5ServerConflict{}
}

/*UpdateSocks5ServerConflict handles this case with default header values.

conflict
*/
type UpdateSocks5ServerConflict struct {
	Payload *vproxy_client_model.Error409
}

func (o *UpdateSocks5ServerConflict) Error() string {
	return fmt.Sprintf("[PUT /socks5-server/{socks5}][%d] updateSocks5ServerConflict  %+v", 409, o.Payload)
}

func (o *UpdateSocks5ServerConflict) GetPayload() *vproxy_client_model.Error409 {
	return o.Payload
}

func (o *UpdateSocks5ServerConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error409)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSocks5ServerInternalServerError creates a UpdateSocks5ServerInternalServerError with default headers values
func NewUpdateSocks5ServerInternalServerError() *UpdateSocks5ServerInternalServerError {
	return &UpdateSocks5ServerInternalServerError{}
}

/*UpdateSocks5ServerInternalServerError handles this case with default header values.

internal error
*/
type UpdateSocks5ServerInternalServerError struct {
	Payload *vproxy_client_model.Error500
}

func (o *UpdateSocks5ServerInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /socks5-server/{socks5}][%d] updateSocks5ServerInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateSocks5ServerInternalServerError) GetPayload() *vproxy_client_model.Error500 {
	return o.Payload
}

func (o *UpdateSocks5ServerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(vproxy_client_model.Error500)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
