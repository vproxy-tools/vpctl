// Code generated by go-swagger; DO NOT EDIT.

package event_loop

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new event loop API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for event loop API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddEventLoop adds event loop into event loop group
*/
func (a *Client) AddEventLoop(params *AddEventLoopParams) (*AddEventLoopNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddEventLoopParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addEventLoop",
		Method:             "POST",
		PathPattern:        "/event-loop-group/{elg}/event-loop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddEventLoopReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddEventLoopNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addEventLoop: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DescribeEventLoop gets detailed info of one event loop in event loop group
*/
func (a *Client) DescribeEventLoop(params *DescribeEventLoopParams) (*DescribeEventLoopOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeEventLoopParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "describeEventLoop",
		Method:             "GET",
		PathPattern:        "/event-loop-group/{elg}/event-loop/{el}/detail",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeEventLoopReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeEventLoopOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for describeEventLoop: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEventLoop gets event loop in event loop group
*/
func (a *Client) GetEventLoop(params *GetEventLoopParams) (*GetEventLoopOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventLoopParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEventLoop",
		Method:             "GET",
		PathPattern:        "/event-loop-group/{elg}/event-loop/{el}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEventLoopReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEventLoopOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEventLoop: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListEventLoop retrieves event loop list from event loop group
*/
func (a *Client) ListEventLoop(params *ListEventLoopParams) (*ListEventLoopOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEventLoopParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listEventLoop",
		Method:             "GET",
		PathPattern:        "/event-loop-group/{elg}/event-loop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListEventLoopReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListEventLoopOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listEventLoop: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveEventLoop removes event loop from event loop group
*/
func (a *Client) RemoveEventLoop(params *RemoveEventLoopParams) (*RemoveEventLoopNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveEventLoopParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeEventLoop",
		Method:             "DELETE",
		PathPattern:        "/event-loop-group/{elg}/event-loop/{el}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveEventLoopReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveEventLoopNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeEventLoop: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
