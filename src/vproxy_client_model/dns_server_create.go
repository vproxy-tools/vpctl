// Code generated by go-swagger; DO NOT EDIT.

package vproxy_client_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DNSServerCreate Dns server create
// swagger:model DnsServerCreate
type DNSServerCreate struct {

	// binding l4addr
	// Required: true
	Address *string `json:"address"`

	// reference to the running event loop group
	EventLoopGroup string `json:"eventLoopGroup,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// answer records
	// Required: true
	Rrsets *string `json:"rrsets"`

	// security group for the dns server to use
	SecurityGroup string `json:"securityGroup,omitempty"`

	// ttl of answer records
	TTL *int64 `json:"ttl,omitempty"`
}

// Validate validates this Dns server create
func (m *DNSServerCreate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRrsets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DNSServerCreate) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("address", "body", m.Address); err != nil {
		return err
	}

	return nil
}

func (m *DNSServerCreate) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DNSServerCreate) validateRrsets(formats strfmt.Registry) error {

	if err := validate.Required("rrsets", "body", m.Rrsets); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DNSServerCreate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DNSServerCreate) UnmarshalBinary(b []byte) error {
	var res DNSServerCreate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
