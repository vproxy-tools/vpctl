// Code generated by go-swagger; DO NOT EDIT.

package vproxy_client_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SecurityGroupRuleCreate security group rule create
// swagger:model SecurityGroupRuleCreate
type SecurityGroupRuleCreate struct {

	// network cidr
	// Required: true
	ClientNetwork *string `json:"clientNetwork"`

	// name
	// Required: true
	Name *string `json:"name"`

	// protocol
	// Required: true
	Protocol SecurityGroupProtocol `json:"protocol"`

	// rule
	// Required: true
	Rule Rule `json:"rule"`

	// port range max for server (inclusive)
	// Required: true
	ServerPortMax *int64 `json:"serverPortMax"`

	// port range min for server (inclusive)
	// Required: true
	ServerPortMin *int64 `json:"serverPortMin"`
}

// Validate validates this security group rule create
func (m *SecurityGroupRuleCreate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerPortMax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerPortMin(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityGroupRuleCreate) validateClientNetwork(formats strfmt.Registry) error {

	if err := validate.Required("clientNetwork", "body", m.ClientNetwork); err != nil {
		return err
	}

	return nil
}

func (m *SecurityGroupRuleCreate) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *SecurityGroupRuleCreate) validateProtocol(formats strfmt.Registry) error {

	if err := m.Protocol.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("protocol")
		}
		return err
	}

	return nil
}

func (m *SecurityGroupRuleCreate) validateRule(formats strfmt.Registry) error {

	if err := m.Rule.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rule")
		}
		return err
	}

	return nil
}

func (m *SecurityGroupRuleCreate) validateServerPortMax(formats strfmt.Registry) error {

	if err := validate.Required("serverPortMax", "body", m.ServerPortMax); err != nil {
		return err
	}

	return nil
}

func (m *SecurityGroupRuleCreate) validateServerPortMin(formats strfmt.Registry) error {

	if err := validate.Required("serverPortMin", "body", m.ServerPortMin); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecurityGroupRuleCreate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityGroupRuleCreate) UnmarshalBinary(b []byte) error {
	var res SecurityGroupRuleCreate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
