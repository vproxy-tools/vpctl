// Code generated by go-swagger; DO NOT EDIT.

package vproxy_client_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DNSServerDetail Dns server detail
// swagger:model DnsServerDetail
type DNSServerDetail struct {

	// binding l4addr
	Address string `json:"address,omitempty"`

	// event loop group
	EventLoopGroup *EventLoopGroupDetail `json:"eventLoopGroup,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rrsets
	Rrsets *UpstreamDetail `json:"rrsets,omitempty"`

	// security group
	SecurityGroup *SecurityGroupDetail `json:"securityGroup,omitempty"`

	// ttl of answer records
	TTL int64 `json:"ttl,omitempty"`
}

// Validate validates this Dns server detail
func (m *DNSServerDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventLoopGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRrsets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DNSServerDetail) validateEventLoopGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.EventLoopGroup) { // not required
		return nil
	}

	if m.EventLoopGroup != nil {
		if err := m.EventLoopGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventLoopGroup")
			}
			return err
		}
	}

	return nil
}

func (m *DNSServerDetail) validateRrsets(formats strfmt.Registry) error {

	if swag.IsZero(m.Rrsets) { // not required
		return nil
	}

	if m.Rrsets != nil {
		if err := m.Rrsets.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rrsets")
			}
			return err
		}
	}

	return nil
}

func (m *DNSServerDetail) validateSecurityGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.SecurityGroup) { // not required
		return nil
	}

	if m.SecurityGroup != nil {
		if err := m.SecurityGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("securityGroup")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DNSServerDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DNSServerDetail) UnmarshalBinary(b []byte) error {
	var res DNSServerDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
