// Code generated by go-swagger; DO NOT EDIT.

package vproxy_client_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TCPLbCreate Tcp lb create
// swagger:model TcpLbCreate
type TCPLbCreate struct {

	// event loop group for accepting connections
	AcceptorLoopGroup string `json:"acceptorLoopGroup,omitempty"`

	// binding l4addr
	// Required: true
	Address *string `json:"address"`

	// upstream reference for backend servers
	// Required: true
	Backend *string `json:"backend"`

	// input buffer size
	InBufferSize int64 `json:"inBufferSize,omitempty"`

	// list of cert key
	ListOfCertKey []string `json:"listOfCertKey"`

	// name
	// Required: true
	Name *string `json:"name"`

	// output buffer size
	OutBufferSize int64 `json:"outBufferSize,omitempty"`

	// protocol
	Protocol Protocol `json:"protocol,omitempty"`

	// security group reference for access control
	SecurityGroup string `json:"securityGroup,omitempty"`

	// event loop group for handling netflow
	WorkerLoopGroup string `json:"workerLoopGroup,omitempty"`
}

// Validate validates this Tcp lb create
func (m *TCPLbCreate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackend(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TCPLbCreate) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("address", "body", m.Address); err != nil {
		return err
	}

	return nil
}

func (m *TCPLbCreate) validateBackend(formats strfmt.Registry) error {

	if err := validate.Required("backend", "body", m.Backend); err != nil {
		return err
	}

	return nil
}

func (m *TCPLbCreate) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *TCPLbCreate) validateProtocol(formats strfmt.Registry) error {

	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	if err := m.Protocol.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("protocol")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TCPLbCreate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TCPLbCreate) UnmarshalBinary(b []byte) error {
	var res TCPLbCreate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
