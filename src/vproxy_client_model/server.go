// Code generated by go-swagger; DO NOT EDIT.

package vproxy_client_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Server server
// swagger:model Server
type Server struct {

	// l4addr or hostname:port
	Address string `json:"address,omitempty"`

	// l3addr
	CurrentIP string `json:"currentIp,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// status
	// Enum: [UP DOWN]
	Status string `json:"status,omitempty"`

	// weight of the server in the server group
	Weight int64 `json:"weight,omitempty"`
}

// Validate validates this server
func (m *Server) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var serverTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UP","DOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTypeStatusPropEnum = append(serverTypeStatusPropEnum, v)
	}
}

const (

	// ServerStatusUP captures enum value "UP"
	ServerStatusUP string = "UP"

	// ServerStatusDOWN captures enum value "DOWN"
	ServerStatusDOWN string = "DOWN"
)

// prop value enum
func (m *Server) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serverTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Server) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Server) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Server) UnmarshalBinary(b []byte) error {
	var res Server
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
