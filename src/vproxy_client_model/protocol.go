// Code generated by go-swagger; DO NOT EDIT.

package vproxy_client_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Protocol protocol
// swagger:model Protocol
type Protocol string

const (

	// ProtocolTCP captures enum value "tcp"
	ProtocolTCP Protocol = "tcp"

	// ProtocolHTTP captures enum value "http"
	ProtocolHTTP Protocol = "http"

	// ProtocolH2 captures enum value "h2"
	ProtocolH2 Protocol = "h2"

	// ProtocolHTTP1x captures enum value "http/1.x"
	ProtocolHTTP1x Protocol = "http/1.x"

	// ProtocolFramedInt32 captures enum value "framed-int32"
	ProtocolFramedInt32 Protocol = "framed-int32"

	// ProtocolDubbo captures enum value "dubbo"
	ProtocolDubbo Protocol = "dubbo"
)

// for schema
var protocolEnum []interface{}

func init() {
	var res []Protocol
	if err := json.Unmarshal([]byte(`["tcp","http","h2","http/1.x","framed-int32","dubbo"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		protocolEnum = append(protocolEnum, v)
	}
}

func (m Protocol) validateProtocolEnum(path, location string, value Protocol) error {
	if err := validate.Enum(path, location, value, protocolEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this protocol
func (m Protocol) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateProtocolEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
