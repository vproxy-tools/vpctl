// Code generated by go-swagger; DO NOT EDIT.

package vproxy_client_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ServerGroupUpdate server group update
// swagger:model ServerGroupUpdate
type ServerGroupUpdate struct {

	// annotations
	Annotations map[string]string `json:"annotations,omitempty"`

	// consider the server unhealthy after $down times of failed health checks
	Down int64 `json:"down,omitempty"`

	// method
	Method ServerGroupMethod `json:"method,omitempty"`

	// health check period (ms) (interval between two hc)
	Period int64 `json:"period,omitempty"`

	// protocol
	Protocol CheckProtocol `json:"protocol,omitempty"`

	// health check timeout (ms) (timeout before getting expected response)
	Timeout int64 `json:"timeout,omitempty"`

	// consider the server healthy after $up times of successful health checks
	Up int64 `json:"up,omitempty"`
}

// Validate validates this server group update
func (m *ServerGroupUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerGroupUpdate) validateMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.Method) { // not required
		return nil
	}

	if err := m.Method.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("method")
		}
		return err
	}

	return nil
}

func (m *ServerGroupUpdate) validateProtocol(formats strfmt.Registry) error {

	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	if err := m.Protocol.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("protocol")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServerGroupUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerGroupUpdate) UnmarshalBinary(b []byte) error {
	var res ServerGroupUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
